"""
This type stub file was generated by pyright.
"""

import typing
from hal_impl.data import hal_data
from .ctre_sim_enums import ErrorCode

class CANifier:
    def __init__(self):
        self.create_called = ...
    
    def _create1(self, deviceNumber: int) -> None:
        self.hal_data = ...
    
    def _setLEDOutput(self, dutyCycle: int, ledChannel: int) -> ErrorCode:
        '''Sets the LED Output

        :param percentOutput: Output duty cycle expressed as percentage.
        :param ledChannel: Channel to set the output of.

        '''
        ...
    
    def setGeneralOutputs(self, outputsBits: int, isOutputBits: int) -> ErrorCode:
        '''Sets the output of all General Pins

        :param outputBits: A bit mask of all the output states.  LSB->MSB is in the order of the #GeneralPin enum.
        :param isOutputBits: A boolean bit mask that sets the pins to be outputs or inputs.  A bit of 1 enables output.

        '''
        ...
    
    def setGeneralOutput(self, outputPin: int, outputValue: bool, outputEnable: bool) -> ErrorCode:
        '''Sets the output of a General Pin

        :param outputPin: The pin to use as output.
        :param outputValue: The desired output state.
        :param outputEnable: Whether this pin is an output. "True" enables output.

        '''
        ...
    
    def _setPWMOutput(self, pwmChannel: int, dutyCycle: int) -> ErrorCode:
        '''Sets the PWM Output
        Currently supports PWM 0, PWM 1, and PWM 2

        :param pwmChannel: Index of the PWM channel to output.
        :param dutyCycle: Duty Cycle (0 to 1) to output.  Default period of the signal is 4.2 ms.

        '''
        ...
    
    def _enablePWMOutput(self, pwmChannel: int, bEnable: bool) -> ErrorCode:
        '''Enables PWM Outputs
        Currently supports PWM 0, PWM 1, and PWM 2

        :param pwmChannel: Index of the PWM channel to enable.
        :param bEnable: enables output on the pwm channel.

        '''
        ...
    
    def getGeneralInput(self, inputPin: int) -> bool:
        '''Gets the state of the specified pin

        :param inputPin: The index of the pin.
        :returns: The state of the pin.

        '''
        ...
    
    def getPWMInput(self, pwmChannel: int) -> typing.List[float]:
        '''Gets the PWM Input

        :param pwmChannel: PWM channel to get.
        :param dutyCycleAndPeriod: Double array to hold Duty Cycle [0] and Period [1].

        '''
        ...
    
    def getLastError(self) -> ErrorCode:
        '''Call GetLastError() generated by this object.
        Not all functions return an error code but can
        potentially report errors.

        This function can be used to retrieve those error codes.

        :returns: The last ErrorCode generated.

        '''
        ...
    
    def getBusVoltage(self) -> float:
        '''Gets the bus voltage seen by the device.

        :returns: The bus voltage value (in volts).

        '''
        ...
    
    def getQuadraturePosition(self) -> int:
        '''Gets the quadrature encoder's position

        :returns: Position of encoder

        '''
        ...
    
    def setQuadraturePosition(self, pos: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the quadrature encoder's position

        :param newPosition: Position to set

        :param timeoutMs:   Timeout value in ms. If nonzero, function will wait for
                            config success and report an error if it times out.
                            If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def getQuadratureVelocity(self) -> int:
        '''Gets the quadrature encoder's velocity

        :returns: Velocity of encoder

        '''
        ...
    
    def getQuadratureSensor(self) -> typing.Tuple[int, int]:
        ...
    
    def configVelocityMeasurementPeriod(self, period: int, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the period of each velocity sample.
        Every 1ms a position value is sampled, and the delta between that sample
        and the position sampled kPeriod ms ago is inserted into a filter.
        kPeriod is configured with this function.

        :param period:    Desired period for the velocity measurement. @see
                          #VelocityMeasPeriod

        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                          config success and report an error if it times out.
                          If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configVelocityMeasurementWindow(self, window: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the number of velocity samples used in the rolling average velocity
        measurement.

        :param windowSize: Number of samples in the rolling average of velocity
                           measurement. Valid values are 1,2,4,8,16,32. If another
                           value is specified, it will truncate to nearest support value.

        :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for
                           config success and report an error if it times out.
                           If zero, no blockinxxg xxor checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configClearPositionOnLimitF(self, clearPositionOnLimitF: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Enables clearing the position of the feedback sensor when the forward
        limit switch is triggered

        :param clearPositionOnLimitF: Whether clearing is enabled, defaults false

        :param timeoutMs:             Timeout value in ms. If nonzero, function will wait for
                                      config success and report an error if it times out.
                                      If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configClearPositionOnLimitR(self, clearPositionOnLimitR: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Enables clearing the position of the feedback sensor when the reverse
        limit switch is triggered

        :param clearPositionOnLimitR: Whether clearing is enabled, defaults false

        :param timeoutMs:             Timeout value in ms. If nonzero, function will wait for
                                      config success and report an error if it times out.
                                      If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configClearPositionOnQuadIdx(self, clearPositionOnQuadIdx: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Enables clearing the position of the feedback sensor when the quadrature index signal
        is detected

        :param clearPositionOnQuadIdx: Whether clearing is enabled, defaults false

        :param timeoutMs:              Timeout value in ms. If nonzero, function will wait for
                                       config success and report an error if it times out.
                                       If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def setLastError(self, error: int) -> None:
        ...
    
    def configSetParameter(self, param: int, value: float, subValue: int, ordinal: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets a parameter. Generally this is not used.

        This can be utilized in

        - Using new features without updating API installation.
        - Errata workarounds to circumvent API implementation.
        - Allows for rapid testing / unit testing of firmware.

        :param param:
            Parameter enumeration.
        :param value:
            Value of parameter.
        :param subValue:
            Subvalue for parameter. Maximum value of 255.
        :param ordinal:
            Ordinal of parameter.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configGetParameter(self, param: int, ordinal: int, timeoutMs: int = ...) -> float:
        '''Gets a parameter. Generally this is not used.

        This can be utilized in

        - Using new features without updating API installation.
        - Errata workarounds to circumvent API implementation.
        - Allows for rapid testing / unit testing of firmware.

        :param param:
            Parameter enumeration.
        :param ordinal:
            Ordinal of parameter.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Value of parameter.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configGetParameter_6(self, param: int, valueToSend: int, ordinal: int, timeoutMs: int = ...) -> typing.Tuple[int, int]:
        ...
    
    def configSetCustomParam(self, newValue: int, paramIndex: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the value of a custom parameter. This is for arbitrary use.

        Sometimes it is necessary to save calibration/duty cycle/output
        information in the device. Particularly if the
        device is part of a subsystem that can be replaced.

        :param newValue:
            Value for custom parameter.
        :param paramIndex:
            Index of custom parameter [0-1].
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configGetCustomParam(self, paramIndex: int, timoutMs: int) -> int:
        '''Gets the value of a custom parameter. This is for arbitrary use.

        Sometimes it is necessary to save calibration/duty cycle/output
        information in the device. Particularly if the
        device is part of a subsystem that can be replaced.

        :param paramIndex:
            Index of custom parameter [0-1].
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Value of the custom param.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configFactoryDefault(self, timeoutMs: int = ...) -> ErrorCode:
        ...
    
    def _getFaults(self) -> int:
        ...
    
    def _getStickyFaults(self) -> int:
        ...
    
    def clearStickyFaults(self, timeoutMs: int = ...) -> ErrorCode:
        '''Clears the Sticky Faults

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def getFirmwareVersion(self) -> int:
        '''Gets the firmware version of the device.

        :returns: Firmware version of device.

        '''
        ...
    
    def hasResetOccurred(self) -> bool:
        '''Returns true if the device has reset since last call.

        :returns: Has a Device Reset Occurred?

        '''
        ...
    
    def setStatusFramePeriod(self, frame: int, periodMs: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the period of the given status frame.

        :param frame: Frame whose period is to be changed.
        :param periodMs: Period in ms for the given frame.
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                          success and report an error if it times out. If zero, no
                          blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def getStatusFramePeriod(self, frame: int, timeoutMs: int = ...) -> int:
        '''Gets the period of the given status frame.

        :param frame: Frame to get the period of.
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                          success and report an error if it times out. If zero, no
                          blocking or checking is performed.
        :returns: Period of the given status frame.

        '''
        ...
    
    def setControlFramePeriod(self, frame: int, periodMs: int) -> ErrorCode:
        '''Sets the period of the given control frame.

        :param frame:
            Frame whose period is to be changed.
        :param periodMs:
            Period in ms for the given frame.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    


