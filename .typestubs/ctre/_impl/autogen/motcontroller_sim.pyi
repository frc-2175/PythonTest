"""
This type stub file was generated by pyright.
"""

import typing
from hal_impl.data import hal_data
from .ctre_sim_enums import ControlMode, ErrorCode, FeedbackDevice

_feedback2key = { FeedbackDevice.QuadEncoder: 'quad_',FeedbackDevice.Analog: 'analog_',FeedbackDevice.PulseWidthEncodedPosition: 'pulse_width_' }
class MotController:
    def __init__(self):
        self.create_called = ...
    
    def _create1(self, baseArbId: int) -> None:
        self.create_called = ...
        self.hal_data = ...
    
    def getDeviceNumber(self) -> int:
        ...
    
    def setDemand(self, mode: int, demand0: int, demand1: int) -> ErrorCode:
        ...
    
    def _set_4(self, mode: int, demand0: float, demand1: float, demand1Type: int) -> ErrorCode:
        ...
    
    def setNeutralMode(self, neutralMode: int) -> None:
        '''Sets the mode of operation during neutral throttle output.

        :param neutralMode:
            The desired mode of operation when the Controller output
            throttle is neutral (ie brake/coast)

        '''
        ...
    
    def setSensorPhase(self, PhaseSensor: bool) -> None:
        '''Sets the phase of the sensor. Use when controller forward/reverse output
        doesn't correlate to appropriate forward/reverse reading of sensor.

        Pick a value so that positive PercentOutput yields a positive change in sensor.
        After setting this, user can freely call SetInverted() with any value.

        :param PhaseSensor:
            Indicates whether to invert the phase of the sensor.

        '''
        ...
    
    def _setInverted_2(self, invertType: int) -> None:
        ...
    
    def configFactoryDefault(self, timeoutMs: int = ...) -> ErrorCode:
        ...
    
    def configOpenLoopRamp(self, secondsFromNeutralToFull: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the open-loop ramp rate of throttle output.

        :param secondsFromNeutralToFull:
            Minimum desired time to go from neutral to full throttle. A
            value of '0' will disable the ramp.
        :param timeoutMs:
            Timeout value in ms. Function will generate error if config is
            not successful within timeout.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configClosedLoopRamp(self, secondsFromNeutralToFull: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the closed-loop ramp rate of throttle output.

        :param secondsFromNeutralToFull:
            Minimum desired time to go from neutral to full throttle. A
            value of '0' will disable the ramp.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configPeakOutputForward(self, percentOut: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the forward peak output percentage.

        :param percentOut:
            Desired peak output percentage [0,1].
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configPeakOutputReverse(self, percentOut: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the reverse peak output percentage.

        :param percentOut:
            Desired peak output percentage.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configNominalOutputForward(self, percentOut: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the forward nominal output percentage.

        :param percentOut:
            Nominal (minimum) percent output [0,+1].
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configNominalOutputReverse(self, percentOut: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the reverse nominal output percentage.

        :param percentOut:
            Nominal (minimum) percent output [-1,0].
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configNeutralDeadband(self, percentDeadband: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the output deadband percentage.

        :param percentDeadband:
            Desired deadband percentage. Minimum is 0.1%, Maximum is 25%.
            Pass 0.04 for 4% (factory default).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configVoltageCompSaturation(self, voltage: float, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the Voltage Compensation saturation voltage.

        :param voltage:
            This is the max voltage to apply to the hbridge when voltage
            compensation is enabled.  For example, if 10 (volts) is specified
            and a TalonSRX is commanded to 0.5 (PercentOutput, closed-loop, etc)
            then the TalonSRX will attempt to apply a duty-cycle to produce 5V.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configVoltageMeasurementFilter(self, filterWindowSamples: int, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the voltage measurement filter.

        :param filterWindowSamples:
            Number of samples in the rolling average of voltage
            measurement.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def enableVoltageCompensation(self, enable: bool) -> None:
        '''Enables voltage compensation. If enabled, voltage compensation works in
        all control modes.

        :param enable:
            Enable state of voltage compensation.

        '''
        ...
    
    def getInverted(self) -> bool:
        ''':returns: invert setting of motor output.

        '''
        ...
    
    def getBusVoltage(self) -> float:
        '''Gets the bus voltage seen by the device.

        :returns: The bus voltage value (in volts).

        '''
        ...
    
    def getMotorOutputPercent(self) -> float:
        '''Gets the output percentage of the motor controller.

        :returns: Output of the motor controller (in percent).

        '''
        ...
    
    def getOutputCurrent(self) -> float:
        '''Gets the output current of the motor controller.

        :returns: The output current (in amps).

        '''
        ...
    
    def getTemperature(self) -> float:
        '''Gets the temperature of the motor controller.

        :returns: Temperature of the motor controller (in 'C)

        '''
        ...
    
    def configSelectedFeedbackSensor(self, feedbackDevice: int, pidIdx: int = ..., timeoutMs: int = ...) -> ErrorCode:
        '''Select the feedback device for the motor controller.
        Most CTRE CAN motor controllers will support remote sensors over CAN.

        :param feedbackDevice:
            Feedback Device to select.
        :type feedbackDevice: :class:`.FeedbackDevice` or :class:`.RemoteFeedbackDevice`
        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
            See Phoenix-Documentation for how to interpret.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configSelectedFeedbackCoefficient(self, coefficient: float, pidIdx: int = ..., timeoutMs: int = ...) -> ErrorCode:
        '''The Feedback Coefficient is a scalar applied to the value of the
        feedback sensor.  Useful when you need to scale your sensor values
        within the closed-loop calculations.  Default value is 1.

        Selected Feedback Sensor register in firmware is the decoded sensor value
        multiplied by the Feedback Coefficient.

        :param coefficient: Feedback Coefficient value.  Maximum value of 1.
                            Resolution is 1/(2^16).  Cannot be 0.

        :param pidIdx:      0 for Primary closed-loop. 1 for auxiliary closed-loop.

        :param timeoutMs:   Timeout value in ms. If nonzero, function will wait for
                            config success and report an error if it times out.
                            If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configRemoteFeedbackFilter(self, deviceID: int, remoteSensorSource: int, remoteOrdinal: int, timeoutMs: int = ...) -> ErrorCode:
        '''Select what remote device and signal to assign to Remote Sensor 0 or Remote Sensor 1.
        After binding a remote device and signal to Remote Sensor X, you may select Remote Sensor X
        as a PID source for closed-loop features.

        :param deviceID:
            The CAN ID of the remote sensor device.
        :param remoteSensorSource:
            The remote sensor device and signal type to bind.
        :param remoteOrdinal:
            0 for configuring Remote Sensor 0
            1 for configuring Remote Sensor 1
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for
            config success and report an error if it times out.
            If zero, no blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configSensorTerm(self, sensorTerm: int, feedbackDevice: int, timeoutMs: int = ...) -> ErrorCode:
        '''Select what sensor term should be bound to switch feedback device.

        Sensor Sum = Sensor Sum Term 0 - Sensor Sum Term 1

        Sensor Difference = Sensor Diff Term 0 - Sensor Diff Term 1

        The four terms are specified with this routine.  Then Sensor Sum/Difference
        can be selected for closed-looping.

        :param sensorTerm: Which sensor term to bind to a feedback source.
        :param feedbackDevice: The sensor signal to attach to sensorTerm.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for
            config success and report an error if it times out.
            If zero, no blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def getSelectedSensorPosition(self, pidIdx: int = ...) -> int:
        '''Get the selected sensor position.

        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
            See Phoenix-Documentation for how to interpret.
        :returns: Position of selected sensor (in Raw Sensor Units).

        '''
        ...
    
    def getSelectedSensorVelocity(self, pidIdx: int = ...) -> int:
        '''Get the selected sensor velocity.

        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
            See Phoenix-Documentation for how to interpret.
        :returns: selected sensor (in raw sensor units) per 100ms.

        '''
        ...
    
    def setSelectedSensorPosition(self, sensorPos: int, pidIdx: int = ..., timeoutMs: int = ...) -> ErrorCode:
        '''Sets the sensor position to the given value.

        :param sensorPos:
            Position to set for the selected sensor (in raw sensor units).
        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def setControlFramePeriod(self, frame: int, periodMs: int) -> ErrorCode:
        '''Sets the period of the given control frame.

        :param frame:
            Frame whose period is to be changed.
        :param periodMs:
            Period in ms for the given frame.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def setStatusFramePeriod(self, frame: int, periodMs: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the period of the given status frame.

        User ensure CAN Bus utilization is not high.
         
        This setting is not persistent and is lost when device is reset. If this
        is a concern, calling application can use HasReset() to determine if the
        status frame needs to be reconfigured.

        :param frame:
            Frame whose period is to be changed.
        :param periodMs:
            Period in ms for the given frame.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def getStatusFramePeriod(self, frame: int, timeoutMs: int = ...) -> int:
        '''Gets the period of the given status frame.

        :param frame:
            Frame to get the period of.
        :type frame: :class:`.StatusFrame` or :class:`.StatusFrameEnhanced`
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Period of the given status frame.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configVelocityMeasurementPeriod(self, period: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the period over which velocity measurements are taken.

        :param period:
            Desired period for the velocity measurement. see :class:`.VelocityMeasPeriod`
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configVelocityMeasurementWindow(self, windowSize: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the number of velocity samples used in the rolling average velocity
        measurement.

        :param windowSize:
            Number of samples in the rolling average of velocity
            measurement. Valid values are 1,2,4,8,16,32. If another value
            is specified, it will truncate to nearest support value.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configForwardLimitSwitchSource(self, type: int, normalOpenOrClose: int, deviceID: int = ..., timeoutMs: int = ...) -> ErrorCode:
        '''Configures the forward limit switch for a local/remote source. For example,
        a CAN motor controller may need to monitor the Limit-F pin of another Talon,
        CANifier, or local Gadgeteer feedback connector.

        :param type:
            Limit switch source. User can choose between the feedback connector,
            a remote Talon SRX, CANifier, or deactivate the feature.
        :type type: LimitSwitchSource or RemoteLimitSwitchSource
        :param normalOpenOrClose:
            Setting for normally open, normally closed, or disabled. This
            setting matches the web-based configuration drop down.
        :type normalOpenOrClose: :class:`LimitSwitchNormal`
        :param deviceID:
            Device ID of remote source (Talon SRX or CANifier device ID).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configReverseLimitSwitchSource(self, type: int, normalOpenOrClose: int, deviceID: int = ..., timeoutMs: int = ...) -> ErrorCode:
        '''Configures the reverse limit switch for a local/remote source. For example,
        a CAN motor controller may need to monitor the Limit-R pin of another Talon,
        CANifier, or local Gadgeteer feedback connector.

        :param type:
            Limit switch source. User can choose between the feedback connector,
            a remote Talon SRX, CANifier, or deactivate the feature.
        :type type: LimitSwitchSource or RemoteLimitSwitchSource
        :param normalOpenOrClose:
            Setting for normally open, normally closed, or disabled. This
            setting matches the web-based configuration drop down.
        :type normalOpenOrClose: :class:`LimitSwitchNormal`
        :param deviceID:
            Device ID of remote source (Talon SRX or CANifier device ID).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def overrideLimitSwitchesEnable(self, enable: bool) -> None:
        '''Sets the enable state for limit switches.

        :param enable:
            Enable state for limit switches.

        '''
        ...
    
    def configForwardSoftLimitThreshold(self, forwardSensorLimit: int, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the forward soft limit threhold.

        :param forwardSensorLimit:
            Forward Sensor Position Limit (in raw Sensor Units).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configReverseSoftLimitThreshold(self, reverseSensorLimit: int, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the reverse soft limit threshold.

        :param reverseSensorLimit:
            Reverse Sensor Position Limit (in Raw Sensor Units).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configForwardSoftLimitEnable(self, enable: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the forward soft limit enable.

        :param enable:
            Forward Sensor Position Limit Enable.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configReverseSoftLimitEnable(self, enable: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Configures the reverse soft limit enable.

        :param enable:
            Reverse Sensor Position Limit Enable.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def overrideSoftLimitsEnable(self, enable: bool) -> None:
        '''Can be used to override-disable the soft limits.
        This function can be used to quickly disable soft limits without
        having to modify the persistent configuration.

        :param enable:
            Enable state for soft limit switches.

        '''
        ...
    
    def config_kP(self, slotIdx: int, value: float, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the 'P' constant in the given parameter slot.

        :param slotIdx:
            Parameter slot for the constant.
        :param value:
            Value of the P constant.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def config_kI(self, slotIdx: int, value: float, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the 'I' constant in the given parameter slot.

        :param slotIdx:
            Parameter slot for the constant.
        :param value:
            Value of the I constant.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def config_kD(self, slotIdx: int, value: float, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the 'D' constant in the given parameter slot.

        :param slotIdx:
            Parameter slot for the constant.
        :param value:
            Value of the D constant.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def config_kF(self, slotIdx: int, value: float, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the 'F' constant in the given parameter slot.

        :param slotIdx:
            Parameter slot for the constant.
        :param value:
            Value of the F constant.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def config_IntegralZone(self, slotIdx: int, izone: float, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the Integral Zone constant in the given parameter slot. If the
        (absolute) closed-loop error is outside of this zone, integral
        accumulator is automatically cleared. This ensures than integral wind up
        events will stop after the sensor gets far enough from its target.

        :param slotIdx:
            Parameter slot for the constant.
        :param izone:
            Value of the Integral Zone constant. (closed loop error units X 1ms).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configAllowableClosedloopError(self, slotIdx: int, allowableClosedLoopError: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the allowable closed-loop error in the given parameter slot.

        :param slotIdx:
            Parameter slot for the constant.
        :param allowableClosedLoopError:
            Value of the allowable closed-loop error.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configMaxIntegralAccumulator(self, slotIdx: int, iaccum: float, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the maximum integral accumulator in the given parameter slot.

        :param slotIdx:
            Parameter slot for the constant.
        :param iaccum:
            Value to set for the integral accumulator (closed loop error
            units X 1ms).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configClosedLoopPeakOutput(self, slotIdx: int, percentOut: float, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the peak closed-loop output.  This peak output is slot-specific and
        is applied to the output of the associated PID loop.
        This setting is seperate from the generic Peak Output setting.

        :param slotIdx:    Parameter slot for the constant.

        :param percentOut: Peak Percent Output from 0 to 1.  This value is absolute and
                           the magnitude will apply in both forward and reverse directions.

        :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for
                           config success and report an error if it times out.
                           If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configClosedLoopPeriod(self, slotIdx: int, loopTimeMs: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the loop time (in milliseconds) of the PID closed-loop calculations.
        Default value is 1 ms.

        :param slotIdx:    Parameter slot for the constant.

        :param loopTimeMs: Loop timing of the closed-loop calculations.  Minimum value of
                           1 ms, maximum of 64 ms.

        :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for
                           config success and report an error if it times out.
                           If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def setIntegralAccumulator(self, iaccum: float, pidIdx: int = ..., timeoutMs: int = ...) -> ErrorCode:
        '''Sets the integral accumulator. Typically this is used to clear/zero the
        integral accumulator, however some use cases may require seeding the
        accumulator for a faster response.

        :param iaccum:
            Value to set for the integral accumulator (closed loop error
            units X 1ms).
        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def getClosedLoopError(self, pidIdx: int = ...) -> int:
        '''Gets the closed-loop error.  The units depend on which control mode is in
        use. See Phoenix-Documentation information on units.

        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
        :returns: Closed-loop error value.

        '''
        ...
    
    def getIntegralAccumulator(self, pidIdx: int = ...) -> float:
        '''Gets the iaccum value.

        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
        :returns: Integral accumulator value.

        '''
        ...
    
    def getErrorDerivative(self, pidIdx: int = ...) -> float:
        '''Gets the derivative of the closed-loop error.

        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
        :returns: The error derivative value.

        '''
        ...
    
    def selectProfileSlot(self, slotIdx: int, pidIdx: int) -> ErrorCode:
        '''Selects which profile slot to use for closed-loop control.

        :param slotIdx:
            Profile slot to select.
        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.

        '''
        ...
    
    def getActiveTrajectoryHeading(self) -> float:
        '''Gets the active trajectory target heading using
        MotionMagicArc/MotionProfileArc control modes.

        :returns: The Active Trajectory Heading in degreees.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def getActiveTrajectoryPosition(self, pidIdx: int = ...) -> int:
        '''Gets the active trajectory target position using
        MotionMagic/MotionProfile control modes.

        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.

        :returns: The Active Trajectory Position in sensor units.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def getActiveTrajectoryVelocity(self, pidIdx: int = ...) -> int:
        '''Gets the active trajectory target velocity using
        MotionMagic/MotionProfile control modes.

        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.

        :returns: The Active Trajectory Velocity in sensor units per 100ms.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def getActiveTrajectoryArbFeedFwd(self, pidIdx: int = ...) -> float:
        '''Gets the active trajectory arbitrary feedforward for pid0 using
        MotionMagic/MotionProfile control modes.

        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.

        :returns: The Active Trajectory ArbFeedFwd in units of percent output (where 0.01 is 1%).


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def getActiveTrajectoryAll(self, pidIdx: int = ...) -> typing.Tuple[int, int, float]:
        '''Retrieve all active trajectory parameters

        :param pidIdx: 0 for Primary closed-loop. 1 for auxiliary closed-loop.

        :returns: (velocity, position, arbFeedFwd)


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configMotionCruiseVelocity(self, sensorUnitsPer100ms: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the Motion Magic Cruise Velocity.  This is the peak target velocity
        that the motion magic curve generator can use.

        :param sensorUnitsPer100ms:
            Motion Magic Cruise Velocity (in raw Sensor Units per 100 ms).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configMotionAcceleration(self, sensorUnitsPer100msPerSec: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the Motion Magic Acceleration. This is the target acceleration that
        the motion magic curve generator can use.

        :param sensorUnitsPer100msPerSec:
            Motion Magic Acceleration (in raw sensor units per 100 ms per
            second).
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configMotionSCurveStrength(self, curveStrength: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the Motion Magic S Curve Strength.
        Call this before using Motion Magic.
        Modifying this during a Motion Magic action should be avoided.

        :param curveStrength: 0 to use Trapezoidal Motion Profile. [1,8] for S-Curve (greater value yields greater smoothing).

        :param timeoutMs:     Timeout value in ms. If nonzero, function will wait for config
                              success and report an error if it times out. If zero, no
                              blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def clearMotionProfileTrajectories(self) -> ErrorCode:
        '''Clear the buffered motion profile in both controller's RAM (bottom), and in the
        API (top).


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def getMotionProfileTopLevelBufferCount(self) -> int:
        '''Retrieve just the buffer count for the api-level (top) buffer. This
        routine performs no CAN or data structure lookups, so its fast and ideal
        if caller needs to quickly poll the progress of trajectory points being
        emptied into controller's RAM. Otherwise just use GetMotionProfileStatus.

        :returns: number of trajectory points in the top buffer.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def _pushMotionProfileTrajectory(self, position: float, velocity: float, headingDeg: float, profileSlotSelect: int, isLastPoint: bool, zeroPos: bool) -> ErrorCode:
        ...
    
    def _pushMotionProfileTrajectory_2(self, position: float, velocity: float, headingDeg: float, profileSlotSelect0: int, profileSlotSelect1: int, isLastPoint: bool, zeroPos: bool, durationMs: int) -> ErrorCode:
        ...
    
    def _pushMotionProfileTrajectory_3(self, position: float, velocity: float, arbFeedFwd: float, auxiliaryPos: float, auxiliaryVel: float, auxiliaryArbFeedFwd: float, profileSlotSelect0: int, profileSlotSelect1: int, isLastPoint: bool, zeroPos0: bool, timeDur: int, useAuxPID: bool) -> ErrorCode:
        ...
    
    def startMotionProfile(self, stream: None, minBufferedPts: int, controlMode: ControlMode) -> ErrorCode:
        '''Simple one-shot firing of a complete MP.

        Starting in 2019, MPs can be fired by building a Buffered Trajectory Point Stream, and calling this routine.

        Once called, the motor controller software will automatically ...

        1. Clear the firmware buffer of trajectory points.
        2. Clear the underrun flags
        3. Reset an index within the Buffered Trajectory Point Stream (so that the same profile can be run again and again).
        4. Start a background thread to manage MP streaming (if not already running).
        5. If..

            a. current control mode already matches motionProfControlMode, set MPE Output to "Hold".
            b. current control mode does not matches motionProfControlMode, apply motionProfControlMode and set MPE Output to "Disable".

        6. Stream the trajectory points into the device's firmware buffer.
        7. Once motor controller has at least minBufferedPts worth in the firmware buffer, MP will automatically start (MPE Output set to "Enable").
        8. Wait until MP finishes, then transitions the Motion Profile Executor's output to "Hold".
        9. IsMotionProfileFinished() will now return true.

        Calling application can use IsMotionProfileFinished() to determine when internal state machine reaches [7].
        Calling application can cancel MP by calling set().  Otherwise do not call set() until MP has completed.

        The legacy API from previous years requires the calling application to pass points via the ProcessMotionProfileBuffer and PushMotionProfileTrajectory.
        This is no longer required if using this StartMotionProfile/IsMotionProfileFinished API.

        :param stream:                A buffer that will be used to stream the trajectory points.  Caller can fill this container with the entire trajectory point, regardless of size.

        :param minBufferedPts:        Minimum number of firmware buffered points before starting MP.
                                    Do not exceed device's firmware buffer capacity or MP will never fire (120 for Motion Profile, or 60 for Motion Profile Arc).
                                    Recommendation value for this would be five to ten samples depending on timeDur of the trajectory point.

        :param motionProfControlMode: Pass MotionProfile or MotionProfileArc.

        :returns: nonzero error code if operation fails.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def isMotionProfileFinished(self) -> bool:
        '''Determine if running MP is complete.
        This requires using the StartMotionProfile routine to start the MP.
        That is because managing the trajectory points is now done in a background thread (if StartMotionProfile is called).

        If calling application uses the legacy API  (more-complex buffering API) from previous years, than this API will
        not return true.

        :returns: true if MP was started using StartMotionProfile, and it has completed execution (MPE is now in "hold").


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def isMotionProfileTopLevelBufferFull(self) -> bool:
        '''Retrieve just the buffer full for the api-level (top) buffer. This
        routine performs no CAN or data structure lookups, so its fast and ideal
        if caller needs to quickly poll. Otherwise just use
        GetMotionProfileStatus.

        :returns: number of trajectory points in the top buffer.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def processMotionProfileBuffer(self) -> ErrorCode:
        '''This must be called periodically to funnel the trajectory points from the
        API's top level buffer to the controller's bottom level buffer. Recommendation
        is to call this twice as fast as the execution rate of the motion
        profile. So if MP is running with 20ms trajectory points, try calling
        this routine every 10ms. All motion profile functions are thread-safe
        through the use of a mutex, so there is no harm in having the caller
        utilize threading.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def _getMotionProfileStatus(self) -> typing.Tuple[int, int, int, bool, bool, bool, bool, int, int]:
        '''Retrieve all status information.
        For best performance, Caller can snapshot all status information regarding the
        motion profile executer.

        :param statusToFill:
            Caller supplied object to fill.

            The members are filled, as follows...
            
            topBufferRem:   The available empty slots in the trajectory buffer.
            The robot API holds a "top buffer" of trajectory points, so your applicaion
            can dump several points at once.  The API will then stream them into the
            low-level buffer, allowing the motor controller to act on them.
            
            topBufferRem: The number of points in the top trajectory buffer.
            
            btmBufferCnt: The number of points in the low level controller buffer.
            
            hasUnderrun:    Set if isUnderrun ever gets set.
            Only is cleared by clearMotionProfileHasUnderrun() to ensure
            
            isUnderrun:     This is set if controller needs to shift a point from its buffer into
            the active trajectory point however
            the buffer is empty.
            This gets cleared automatically when is resolved.
            
            activePointValid:   True if the active trajectory point has not empty, false otherwise. The members in activePoint are only valid if this signal is set.
            
            isLast: is set/cleared based on the MP executer's current
            trajectory point's IsLast value.  This assumes
            IsLast was set when PushMotionProfileTrajectory
            was used to insert the currently processed trajectory
            point.
            
            profileSlotSelect: The currently processed trajectory point's
            selected slot.  This can differ in the currently selected slot used
            for Position and Velocity servo modes
            
            outputEnable:       The current output mode of the motion profile
            executer (disabled, enabled, or hold).  When changing the set()
            value in MP mode, it's important to check this signal to
            confirm the change takes effect before interacting with the top buffer.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def _getMotionProfileStatus_2(self) -> typing.Tuple[int, int, int, bool, bool, bool, bool, int, int, int, int]:
        ...
    
    def clearMotionProfileHasUnderrun(self, timeoutMs: int = ...) -> ErrorCode:
        '''Clear the "Has Underrun" flag. Typically this is called after application
        has confirmed an underrun had occured.

        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def changeMotionControlFramePeriod(self, periodMs: int) -> ErrorCode:
        '''Calling application can opt to speed up the handshaking between the robot
        API and the controller to increase the download rate of the controller's Motion
        Profile. Ideally the period should be no more than half the period of a
        trajectory point.

        :param periodMs:
            The transmit period in ms.
        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configMotionProfileTrajectoryPeriod(self, durationMs: int, timeoutMs: int = ...) -> ErrorCode:
        '''When trajectory points are processed in the motion profile executer, the MPE determines
        how long to apply the active trajectory point by summing baseTrajDurationMs with the
        timeDur of the trajectory point (see TrajectoryPoint).

        This allows general selection of the execution rate of the points with 1ms resolution,
        while allowing some degree of change from point to point.

        :param baseTrajDurationMs: The base duration time of every trajectory point.
                                   This is summed with the trajectory points unique timeDur.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for
            config success and report an error if it times out.
            If zero, no blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configMotionProfileTrajectoryInterpolationEnable(self, enable: bool, timeoutMs: int = ...) -> ErrorCode:
        '''When trajectory points are processed in the buffer, the motor controller can
        linearly interpolate additional trajectory points between the buffered
        points.  The time delta between these interpolated points is 1 ms.

        By default this feature is enabled.

        :param enable:    Whether to enable the trajectory point interpolation feature.

        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                          config success and report an error if it times out.
                          If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configFeedbackNotContinuous(self, feedbackNotContinuous: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Disables continuous tracking of the position for analog and pulse-width.
        If the signal goes from 4095 to 0 (pulse-width) a motor controller will continue to read 4096 by default.
        If overflow tracking is disabled, it will wrap to 0 (not continuous)

        If using pulse-width on CTRE Mag Encoder (within one rotation) or absolute analog sensor (within one rotation),
        setting feedbackNotContinuous to true is recommended, to prevent intermittent
        connections from causing sensor "jumps" of 4096 (or 1024 for analog) units.

        :param feedbackNotContinuous: True to disable the overflow tracking.

        :param timeoutMs:             Timeout value in ms. If nonzero, function will wait for
                                      config success and report an error if it times out.
                                      If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configRemoteSensorClosedLoopDisableNeutralOnLOS(self, remoteSensorClosedLoopDisableNeutralOnLOS: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Disables going to neutral (brake/coast) when a remote sensor is no longer detected.

        :param remoteSensorClosedLoopDisableNeutralOnLOS: disable going to neutral

        :param timeoutMs:                                 Timeout value in ms. If nonzero, function will wait for
                                                          config success and report an error if it times out.
                                                          If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configClearPositionOnLimitF(self, clearPositionOnLimitF: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Enables clearing the position of the feedback sensor when the forward
        limit switch is triggered.

        :param clearPositionOnLimitF: Whether clearing is enabled, defaults false

        :param timeoutMs:             Timeout value in ms. If nonzero, function will wait for
                                      config success and report an error if it times out.
                                      If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configClearPositionOnLimitR(self, clearPositionOnLimitR: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Enables clearing the position of the feedback sensor when the reverse
        limit switch is triggered

        :param clearPositionOnLimitR: Whether clearing is enabled, defaults false

        :param timeoutMs:             Timeout value in ms. If nonzero, function will wait for
                                      config success and report an error if it times out.
                                      If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configClearPositionOnQuadIdx(self, clearPositionOnQuadIdx: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Enables clearing the position of the feedback sensor when the quadrature index signal
        is detected

        :param clearPositionOnQuadIdx: Whether clearing is enabled, defaults false

        :param timeoutMs:              Timeout value in ms. If nonzero, function will wait for
                                       config success and report an error if it times out.
                                       If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.


        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        '''
        ...
    
    def configLimitSwitchDisableNeutralOnLOS(self, limitSwitchDisableNeutralOnLOS: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Disables limit switches triggering (if enabled) when the sensor is no longer detected.

        :param limitSwitchDisableNeutralOnLOS: disable triggering

        :param timeoutMs:                      Timeout value in ms. If nonzero, function will wait for
                                               config success and report an error if it times out.
                                               If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configSoftLimitDisableNeutralOnLOS(self, softLimitDisableNeutralOnLOS: bool, timeoutMs: int = ...) -> ErrorCode:
        '''Disables soft limits triggering (if enabled) when the sensor is no longer detected.

        :param softLimitDisableNeutralOnLOS: disable triggering

        :param timeoutMs:                    Timeout value in ms. If nonzero, function will wait for
                                             config success and report an error if it times out.
                                             If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configPulseWidthPeriod_EdgesPerRot(self, pulseWidthPeriod_EdgesPerRot: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the edges per rotation of a pulse width sensor. (This should be set for
        tachometer use).

        :param pulseWidthPeriod_EdgesPerRot: edges per rotation

        :param timeoutMs:                    Timeout value in ms. If nonzero, function will wait for
                                             config success and report an error if it times out.
                                             If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configPulseWidthPeriod_FilterWindowSz(self, pulseWidthPeriod_FilterWindowSz: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the number of samples to use in smoothing a pulse width sensor with a rolling
        average. Default is 1 (no smoothing).

        :param pulseWidthPeriod_FilterWindowSz: samples for rolling avg

        :param timeoutMs:                       Timeout value in ms. If nonzero, function will wait for
                                                config success and report an error if it times out.
                                                If zero, no blocking or checking is performed.

        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def getLastError(self) -> ErrorCode:
        '''Gets the last error generated by this object.

        :returns: Last Error Code generated by a function.

        '''
        ...
    
    def getFirmwareVersion(self) -> int:
        '''Gets the firmware version of the device.

        :returns: Firmware version of device. For example: version 1-dot-2
            is 0x0102.

        '''
        ...
    
    def hasResetOccurred(self) -> bool:
        ''':returns: Returns true if the device has reset since last call

        '''
        ...
    
    def configSetCustomParam(self, newValue: int, paramIndex: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets the value of a custom parameter. This is for arbitrary use.

        Sometimes it is necessary to save calibration/limit/target information
        in the device. Particularly if the device is part of a subsystem that
        can be replaced.

        :param newValue:
            Value for custom parameter.
        :param paramIndex:
            Index of custom parameter [0,1].
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for
            config success and report an error if it times out.
            If zero, no blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configGetCustomParam(self, paramIndex: int, timoutMs: int) -> int:
        '''Gets the value of a custom parameter.

        :param paramIndex:
            Index of custom parameter [0,1].
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for
            config success and report an error if it times out.
            If zero, no blocking or checking is performed.
        :returns: Value of the custom param.

        '''
        ...
    
    def configSetParameter(self, param: int, value: float, subValue: int, ordinal: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets a parameter.

        :param param:
            Parameter enumeration.
        :param value:
            Value of parameter.
        :param subValue:
            Subvalue for parameter. Maximum value of 255.
        :param ordinal:
            Ordinal of parameter.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for
            config success and report an error if it times out.
            If zero, no blocking or checking is performed.
        :returns: Error Code generated by function. 0 indicates no error.

        '''
        ...
    
    def configGetParameter(self, param: int, ordinal: int, timeoutMs: int = ...) -> float:
        '''Gets a parameter.

        :param param:
            Parameter enumeration.
        :param ordinal:
            Ordinal of parameter.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for
            config success and report an error if it times out.
            If zero, no blocking or checking is performed.

        :returns: Value of parameter.

        '''
        ...
    
    def configGetParameter_6(self, param: int, valueToSend: int, ordinal: int, timeoutMs: int = ...) -> typing.Tuple[int, int]:
        ...
    
    def configPeakCurrentLimit(self, amps: int, timeoutMs: int = ...) -> ErrorCode:
        '''Configure the peak allowable current (when current limit is enabled).

        Current limit is activated when current exceeds the peak limit for longer
        than the peak duration. Then software will limit to the continuous limit.
        This ensures current limiting while allowing for momentary excess current
        events.

        For simpler current-limiting (single threshold) use
        ConfigContinuousCurrentLimit() and set the peak to zero:
        ConfigPeakCurrentLimit(0).

        Not available on the Victor SPX

        :param amps:
            Amperes to limit.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.

        '''
        ...
    
    def configPeakCurrentDuration(self, milliseconds: int, timeoutMs: int = ...) -> ErrorCode:
        '''Configure the peak allowable duration (when current limit is enabled).

        Current limit is activated when current exceeds the peak limit for longer
        than the peak duration. Then software will limit to the continuous limit.
        This ensures current limiting while allowing for momentary excess current
        events.

        For simpler current-limiting (single threshold) use
        ConfigContinuousCurrentLimit() and set the peak to zero:
        ConfigPeakCurrentLimit(0).

        Not available on the Victor SPX

        :param milliseconds:
            How long to allow current-draw past peak limit.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.

        '''
        ...
    
    def configContinuousCurrentLimit(self, amps: int, timeoutMs: int = ...) -> ErrorCode:
        '''Configure the continuous allowable current-draw (when current limit is
        enabled).

        Current limit is activated when current exceeds the peak limit for longer
        than the peak duration. Then software will limit to the continuous limit.
        This ensures current limiting while allowing for momentary excess current
        events.

        For simpler current-limiting (single threshold) use
        ConfigContinuousCurrentLimit() and set the peak to zero:
        ConfigPeakCurrentLimit(0).

        Not available on the Victor SPX

        :param amps:
            Amperes to limit.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.

        '''
        ...
    
    def enableCurrentLimit(self, enable: bool) -> ErrorCode:
        '''Enable or disable Current Limit.

        :param enable:
            Enable state of current limit.

        Not available on the Victor SPX

        see :meth:`.configPeakCurrentLimit`, :meth:`.configPeakCurrentDuration`,
        :meth:`.configContinuousCurrentLimit`

        '''
        ...
    
    def setLastError(self, error: int) -> ErrorCode:
        ...
    
    def getAnalogIn(self) -> int:
        '''Get the position of whatever is in the analog pin of the Talon,
        regardless of whether it is actually being used for feedback.

        :returns:
            the 24bit analog value. The bottom ten bits is the ADC (0 - 1023)
            on the analog pin of the Talon. The upper 14 bits tracks the
            overflows and underflows (continuous sensor).

        '''
        ...
    
    def setAnalogPosition(self, newPosition: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets analog position.

        :param newPosition:
            The new position.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: an ErrorCode.

        '''
        ...
    
    def getAnalogInRaw(self) -> int:
        '''Get the position of whatever is in the analog pin of the Talon,
        regardless of whether it is actually being used for feedback.

        :returns: the ADC (0 - 1023) on analog pin of the Talon.

        '''
        ...
    
    def getAnalogInVel(self) -> int:
        '''Get the velocity of whatever is in the analog pin of the Talon,
        regardless of whether it is actually being used for feedback.

        :returns: the speed in units per 100ms where 1024 units is one rotation.

        '''
        ...
    
    def getQuadraturePosition(self) -> int:
        '''Get the quadrature position of the Talon, regardless of whether
        it is actually being used for feedback.

        :returns: Quadrature encoder position

        '''
        ...
    
    def setQuadraturePosition(self, newPosition: int, timeoutMs: int = ...) -> ErrorCode:
        '''Change the quadrature reported position. Typically this is used to "zero"
        the sensor. This only works with Quadrature sensor. To set the selected
        sensor position regardless of what type it is, see
        SetSelectedSensorPosition in the motor controller class.

        :param newPosition:
            The position value to apply to the sensor.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: error code.

        '''
        ...
    
    def getQuadratureVelocity(self) -> int:
        '''Get the quadrature velocity, regardless of whether
        it is actually being used for feedback.

        :returns: the quadrature encoder velocity

        '''
        ...
    
    def getPulseWidthPosition(self) -> int:
        '''Gets pulse width position, regardless of whether
        it is actually being used for feedback.

        :returns: the pulse width position.

        '''
        ...
    
    def setPulseWidthPosition(self, newPosition: int, timeoutMs: int = ...) -> ErrorCode:
        '''Sets pulse width position.

        :param newPosition:
            The position value to apply to the sensor.
        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: an ErrorCode

        '''
        ...
    
    def getPulseWidthVelocity(self) -> int:
        '''Gets pulse width velocity, regardless of whether
        it is actually being used for feedback.

        :returns: the pulse width velocity  in units per 100ms (where 4096 units is 1 rotation).

        '''
        ...
    
    def getPulseWidthRiseToFallUs(self) -> int:
        '''Gets pulse width rise to fall time.

        :returns: the pulse width rise to fall time in microseconds.

        '''
        ...
    
    def getPulseWidthRiseToRiseUs(self) -> int:
        '''Gets pulse width rise to rise time.

        :returns: the pulse width rise to rise time in microseconds.

        '''
        ...
    
    def getPinStateQuadA(self) -> int:
        ...
    
    def getPinStateQuadB(self) -> int:
        ...
    
    def getPinStateQuadIdx(self) -> int:
        ...
    
    def isFwdLimitSwitchClosed(self) -> int:
        ...
    
    def isRevLimitSwitchClosed(self) -> int:
        ...
    
    def _getFaults(self) -> int:
        ...
    
    def _getStickyFaults(self) -> int:
        ...
    
    def clearStickyFaults(self, timeoutMs: int = ...) -> ErrorCode:
        '''Clears all sticky faults.

        :param timeoutMs:
            Timeout value in ms. If nonzero, function will wait for config
            success and report an error if it times out. If zero, no
            blocking or checking is performed.
        :returns: Last Error Code generated by a function.

        '''
        ...
    
    def selectDemandType(self, enable: bool) -> ErrorCode:
        '''For now this simply updates the CAN signal to the motor controller.
        Future firmware updates will use this to control advanced auxiliary loop behavior.

        :param value:

        '''
        ...
    
    def setMPEOutput(self, MpeOutput: int) -> ErrorCode:
        ...
    
    def enableHeadingHold(self, enable: bool) -> ErrorCode:
        '''Enables a future feature called "Heading Hold".
        For now this simply updates the CAN signal to the motor controller.
        Future firmware updates will use this.

        :param enable: true/false enable

        '''
        ...
    
    def getAnalogInAll(self) -> typing.Tuple[int, int, int]:
        ...
    
    def getQuadratureSensor(self) -> typing.Tuple[int, int]:
        ...
    
    def getPulseWidthAll(self) -> typing.Tuple[int, int, int, int]:
        ...
    
    def getQuadPinStates(self) -> typing.Tuple[int, int, int]:
        ...
    
    def getLimitSwitchState(self) -> typing.Tuple[int, int]:
        ''':returns: Forward Limit switch closed, Reverse Limit switch closed

        '''
        ...
    
    def getClosedLoopTarget(self, pidIdx: int = ...) -> int:
        '''Gets the current target of a given closed loop.

        :param pidIdx:
            0 for Primary closed-loop. 1 for auxiliary closed-loop.
        :returns: Closed-loop error value.

        '''
        ...
    
    def _set_out(self, out):
        ...
    
    def _get_out(self):
        ...
    
    _out = ...
    @property
    def _pidIdx(self):
        ...
    
    @property
    def _slotIdx(self):
        ...
    
    def _get_target(self):
        ...
    
    def _set_target(self, t):
        ...
    
    _target = ...
    def _get_outBeforRmp(self):
        ...
    
    def _set_outBeforRmp(self, rmp):
        ...
    
    _outBeforRmp = ...
    def _get_prevErr(self):
        ...
    
    def _set_prevErr(self, err):
        ...
    
    _prevErr = ...
    def _get_err(self):
        ...
    
    def _set_err(self, err):
        ...
    
    _err = ...
    def _get_notFirst(self):
        ...
    
    def _set_notFirst(self, notFirst):
        ...
    
    _notFirst = ...
    def _get_iAccum(self):
        ...
    
    def _set_iAccum(self, accum):
        ...
    
    _iAccum = ...
    _use_notifier = ...
    def _calculate_1ms(self):
        ...
    
    def _motion_magic_next_target(self):
        ...
    
    def _calculate_pid(self, pos, revMotDuringCloseLoopEn, oneDirOnly):
        ...
    


