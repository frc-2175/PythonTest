"""
This type stub file was generated by pyright.
"""

import typing
from .sensorcollection import SensorCollection
from .btrajectorypoint import BTrajectoryPoint
from .trajectorypoint import TrajectoryPoint
from ._impl import ControlMode, DemandType, ErrorCode, Faults, FollowerType, InvertType, LimitSwitchNormal, MotController, MotionProfileStatus, NeutralMode, ParamEnum, RemoteFeedbackDevice, RemoteLimitSwitchSource, RemoteSensorSource, StatusFrame, StickyFaults, VelocityMeasPeriod

__all__ = ["BaseMotorController"]
class BaseMotorController(MotController):
    """Base motor controller features for all CTRE CAN motor controllers."""
    ControlMode = ...
    DemandType = ...
    InvertType = ...
    LimitSwitchNormal = ...
    NeutralMode = ...
    ParamEnum = ...
    RemoteFeedbackDevice = ...
    RemoteLimitSwitchSource = ...
    RemoteSensorSource = ...
    StatusFrame = ...
    VelocityMeasPeriod = ...
    def __init__(self, arbId: int) -> None:
        """
        Constructor for motor controllers.
        
        :param arbId:
        """
        self.arbId = ...
        self.sensorColl = ...
        self.controlMode = ...
    
    def getDeviceID(self) -> int:
        """
        Returns the Device ID
        
        :returns: Device number.
        """
        ...
    
    __set4_modes = ...
    def set(self, mode: ControlMode, demand0: float, demand1Type: DemandType = ..., demand1: float = ...):
        """
        Sets the appropriate output on the talon, depending on the mode.

        :param mode:
            The output mode to apply.
        :param demand0:
            The output value to apply. such as advanced feed forward and/or auxiliary close-looping in firmware.

            In :attr:`.ControlMode.PercentOutput`, the output is between -1.0 and 1.0, with 0.0 as
            stopped.
            
            In :attr:`.ControlMode.Voltage` mode, output value is in volts.
            
            In :attr:`.ControlMode.Current` mode, output value is in amperes.
            
            In :attr:`.ControlMode.Speed` mode, output value is in position change / 100ms.
            
            In :attr:`.ControlMode.Position` mode, output value is in encoder ticks or an analog value, depending on the sensor.
            
            In :attr:`.ControlMode.Follower` mode, the output value is the integer device ID of the talon to duplicate.
        :param demand1Type:
            The demand type for demand1.
            
            * Neutral: Ignore demand1 and apply no change to the demand0 output.
            * AuxPID: Use demand1 to set the target for the auxiliary PID 1.
            * ArbitraryFeedForward: Use demand1 as an arbitrary additive value to the
              demand0 output.  In PercentOutput the demand0 output is the motor output,
              and in closed-loop modes the demand0 output is the output of PID0.
        :param demand1:
            Supplemental value.  This will also be control mode specific for future features.
    
        Arcade Drive Example::
        
            _talonLeft.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, +joyTurn)
            _talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.ArbitraryFeedForward, -joyTurn)
                    
        Drive Straight Example::
                            
            # Note: Selected Sensor Configuration is necessary for both PID0 and PID1.
            _talonLeft.follow(_talonRght, FollowerType.AuxOutput1)
            _talonRght.set(ControlMode.PercentOutput, joyForward, DemandType.AuxPID, desiredRobotHeading)
                            
        Drive Straight to a Distance Example::
        
            # Note: Other configurations (sensor selection, PID gains, etc.) need to be set.
            _talonLeft.follow(_talonRght, FollowerType.AuxOutput1);
            _talonRght.set(ControlMode.MotionMagic, targetDistance, DemandType.AuxPID, desiredRobotHeading)
        
        """
        self.controlMode = ...
    
    def neutralOutput(self):
        """Neutral the motor output by setting control mode to disabled."""
        ...
    
    def setInverted(self, invert: typing.Union[bool, InvertType]):
        """
        Inverts the hbridge output of the motor controller.

        This does not impact sensor phase and should not be used to correct sensor polarity.

        This will invert the hbridge output but NOT the LEDs.
        This ensures....

        - Green LEDs always represents positive request from robot-controller/closed-looping mode.
        - Green LEDs correlates to forward limit switch.
        - Green LEDs correlates to forward soft limit.
        
        :param invert:
            Invert state to set.
        """
        self.invert = ...
    
    def getInverted(self) -> bool:
        """:returns: invert setting of motor output"""
        ...
    
    def getMotorOutputVoltage(self) -> float:
        """:returns: applied voltage to motor in volts"""
        ...
    
    def getMotionProfileStatus(self) -> MotionProfileStatus:
        """
        Retrieve all status information.
        For best performance, Caller can snapshot all status information regarding the
        motion profile executer.
        """
        ...
    
    def pushMotionProfileTrajectory(self, trajPt: typing.Union[TrajectoryPoint, BTrajectoryPoint]) -> ErrorCode:
        """Push another trajectory point into the top level buffer (which is emptied
        into the motor controller's bottom buffer as room allows).

        :param trajPt: New point to push into buffer. You can use either the
                       :class:`.BTrajectoryPoint` or the legacy :class:`.TrajectoryPoint`
                       tuples. See the documentation for those structures for
                       details of the contents of each point.
        
        :returns: CTR_OKAY if trajectory point push ok. ErrorCode if buffer is
            full due to kMotionProfileTopBufferCapacity.
        
        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.
        """
        ...
    
    def getFaults(self) -> Faults:
        """Gets the last error generated by this object.

        Not all functions return an error code but can potentially report errors.
        This function can be used to retrieve those error codes.
        """
        ...
    
    def getStickyFaults(self) -> StickyFaults:
        """
        Polls the various sticky fault flags.
        """
        ...
    
    def getBaseID(self) -> int:
        ...
    
    def follow(self, masterToFollow: BaseMotorController, followerType: FollowerType = ...):
        """
        Set the control mode and output value so that this motor controller will
        follow another motor controller. Currently supports following Victor SPX
        and Talon SRX.
        """
        ...
    
    def valueUpdated(self):
        """
        When master makes a device, this routine is called to signal the update."""
        ...
    
    def getSensorCollection(self) -> SensorCollection:
        """
        :returns: object that can get/set individual raw sensor values."""
        ...
    
    def getControlMode(self) -> ControlMode:
        """
        :returns: control mode motor controller is in"""
        ...
    
    def configAuxPIDPolarity(self, invert: bool, timeoutMs: int) -> ErrorCode:
        """Configures the Polarity of the Auxiliary PID (PID1).
        
        Standard Polarity:
        
        * Primary Output = PID0 + PID1
        * Auxiliary Output = PID0 - PID1
        
        Inverted Polarity:
        
        * Primary Output = PID0 - PID1
        * Auxiliary Output = PID0 + PID1
        
        :param invert:    If true, use inverted PID1 output polarity.
        
        :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                          success and report an error if it times out. If zero, no
                          blocking or checking is performed.
        
        :returns: Error Code
        """
        ...
    


