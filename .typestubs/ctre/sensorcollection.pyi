"""
This type stub file was generated by pyright.
"""

__all__ = ["SensorCollection"]
class SensorCollection:
    def __init__(self, motorController):
        """
        :type motorController: :class:`.BaseMotorController`"""
        self.motorController = ...
    
    @property
    def impl(self):
        ...
    
    @property
    def handle(self):
        ...
    
    def getAnalogIn(self) -> int:
        ...
    
    def setAnalogPosition(self, newPosition: int, timeoutMs: int):
        ...
    
    def getAnalogInRaw(self) -> int:
        ...
    
    def getAnalogInVel(self) -> int:
        ...
    
    def getQuadraturePosition(self) -> int:
        ...
    
    def setQuadraturePosition(self, newPosition: int, timeoutMs: int):
        ...
    
    def getQuadratureVelocity(self) -> int:
        ...
    
    def getPulseWidthPosition(self) -> int:
        ...
    
    def setPulseWidthPosition(self, newPosition: int, timeoutMs: int):
        ...
    
    def getPulseWidthVelocity(self) -> int:
        ...
    
    def getPulseWidthRiseToFallUs(self) -> int:
        ...
    
    def getPulseWidthRiseToRiseUs(self) -> int:
        ...
    
    def getPinStateQuadA(self) -> bool:
        """
        Gets pin state quad a.

        :returns: the pin state quad a (1 if asserted, 0 if not asserted).
        """
        ...
    
    def getPinStateQuadB(self) -> bool:
        """
        Gets pin state quad b.

        :returns: Digital level of QUADB pin (1 if asserted, 0 if not asserted).
        """
        ...
    
    def getPinStateQuadIdx(self) -> bool:
        """
        Gets pin state quad index.

        :returns: Digital level of QUAD Index pin (1 if asserted, 0 if not asserted).
        """
        ...
    
    def isFwdLimitSwitchClosed(self) -> bool:
        """
        Is forward limit switch closed.

        This function works regardless if limit switch feature is
        enabled.

        :returns: True iff forward limit switch is closed, False iff switch is open.
        """
        ...
    
    def isRevLimitSwitchClosed(self) -> bool:
        """
        Is reverse limit switch closed.

        This function works regardless if limit switch feature is
        enabled.

        :returns: True iff reverse limit switch is closed, False iff switch is open.
        """
        ...
    


