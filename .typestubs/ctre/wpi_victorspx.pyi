"""
This type stub file was generated by pyright.
"""

from wpilib import MotorSafety, SendableBase
from .victorspx import VictorSPX

__all__ = ["WPI_VictorSPX"]
class WPI_VictorSPX(VictorSPX, SendableBase, MotorSafety):
    """WPI Compliant motor controller class.
    WPILIB's object model requires many interfaces to be implemented to use
    the various features.
    This includes...

    - Software PID loops running in the robot controller
    - LiveWindow/Test mode features
    - Motor Safety (auto-turn off of motor if Set stops getting called)
    - Single Parameter set that assumes a simple motor controller.
    """
    def __init__(self, deviceNumber: int):
        self.description = ...
        self.speed = ...
    
    def set(self, *args, **kwargs):
        """
        Can be called either with a single arg representing speed, or with
        up to 4 arguments:
        
        :param mode:
            The output mode to apply.
        :param demand0:
            The output value to apply. such as advanced feed forward and/or auxiliary close-looping in firmware.

            In :attr:`.ControlMode.PercentOutput`, the output is between -1.0 and 1.0, with 0.0 as
            stopped.
            
            In :attr:`.ControlMode.Voltage` mode, output value is in volts.
            
            In :attr:`.ControlMode.Current` mode, output value is in amperes.
            
            In :attr:`.ControlMode.Speed` mode, output value is in position change / 100ms.
            
            In :attr:`.ControlMode.Position` mode, output value is in encoder ticks or an analog value, depending on the sensor.
            
            In :attr:`.ControlMode.Follower` mode, the output value is the integer device ID of the talon to duplicate.
        :param demand1Type:
            The demand type for demand1.
            
            * Neutral: Ignore demand1 and apply no change to the demand0 output.
            * AuxPID: Use demand1 to set the target for the auxiliary PID 1.
            * ArbitraryFeedForward: Use demand1 as an arbitrary additive value to the
              demand0 output.  In PercentOutput the demand0 output is the motor output,
              and in closed-loop modes the demand0 output is the output of PID0.
        :param demand1:
            Supplemental value.  This will also be control mode specific for future features.
        """
        ...
    
    def pidWrite(self, output: float):
        ...
    
    def get(self) -> float:
        """Common interface for getting the current set speed of a speed controller.
        
        :returns: The current set speed. Value is between -1.0 and 1.0.
        """
        ...
    
    def disable(self):
        ...
    
    def stopMotor(self):
        """Common interface to stop the motor until :meth:`.set` is called again."""
        ...
    
    def initSendable(self, builder):
        ...
    
    def getDescription(self):
        ...
    


