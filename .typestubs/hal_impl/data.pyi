"""
This type stub file was generated by pyright.
"""

import logging

"""
This type stub file was generated by pyright.
"""
logger = logging.getLogger("hal.data")
hal_data = {  }
hal_in_data = {  }
hooks = None
class NotifyDict(dict):
    """
        Allows us to listen to changes in the dictionary --
        note that we don't wrap everything, because for our
        purposes we don't care about the rest

        We only use these for some keys in the hal_data dict,
        as not all keys are useful to listen to
    """
    __slots__ = ...
    def __init__(self, *args, **kwargs):
        self.cbs = ...
    
    def register(self, k, cb, notify: bool = ...):
        """
            register a function to be called when an item is set
            with in this dictionary. We raise a key error if the
            key passed is not a key that the dictionary contains.

            :param k:        Key to be registered for call back. The key must be a
                             valid key with in the dictionary
            :param cb:       Function to be called if k is set. This function needs
                             to take at least 2 parameters
            :param notify:   Calls the function cb after registering k
        """
        ...
    
    def __setitem__(self, k, v):
        """
           Overrides __setitem__. If k has any callback functions defined they are
           called from here

           :param k: key to be set
           :param v: value to be set
        """
        ...
    


class IN:
    """Marks a variable in the dict as something the simulator can set"""
    def __init__(self, value):
        self.value = ...
    


class OUT:
    """Marks a variable in the dict as something the robot will set"""
    def __init__(self, value):
        self.value = ...
    


def _reset_hal_data(current_hooks):
    """
        Intended to be used by the test runner or simulator. Don't call this
        directly, instead call hal_impl.reset_hal()

        Subject to change until the simulator is fully developed, as the
        usefulness of some of this isn't immediately clear yet.

        Generally, non-hal components should only be modifying this
        dict, and shouldn't add new keys, nor delete existing keys.

        TODO: add comments stating which parameters are input, output, expected types

        TODO: initialization isn't consistent yet. Need to decide whether to
              use None, or an explicit initialization key

        :param hooks: A :class:`SimHooks` or similar instance

        .. warning:: Don't put invalid floats in here, or this structure
                     is no longer JSON serializable!
    """
    ...

def _filter_hal_data(both_dict, in_dict):
    ...

def _filter_hal_list(both_list):
    ...

def update_hal_data(in_dict, out_dict=...):
    """Given a dictionary of inputs, update the hal_data"""
    ...

