"""
This type stub file was generated by pyright.
"""

import collections
from . import functions as _dll
from hal.exceptions import HALError
from typing import Any, Optional

"""
This type stub file was generated by pyright.
"""
__all__ = ["_dll", "_RETFUNC", "_VAR", "sleep"]
sleep = _dll.sleep
FuncData = collections.namedtuple("FuncData", ["name", "c_name", "restype", "params", "out"])
class SimulationError(HALError):
    """If you get this error, an undefined simulation error occurred"""
    ...


def gen_check(pname, ptype):
    ...

def gen_func(f, name, restype, params, out, _thunk):
    ...

def _RETFUNC(name, restype, *params, out: Optional[Any] = ..., library=..., errcheck: Optional[Any] = ..., handle_missing: bool = ..., _thunk: bool = ..., c_name: Optional[Any] = ...):
    ...

def _THUNKFUNC(*a, **k):
    """This is the same as _RETFUNC, except that in simulation mode you should
       call _THUNKFUNC defined functions with a tuple of (simPort, param),
       allowing the API to implement objects where there are none
       
       The simPort object will be called with the normal function signature of
       the API call.
    """
    ...

def _VAR(name, type, library=...):
    """These are always constants, so it's ok to return a value"""
    ...

