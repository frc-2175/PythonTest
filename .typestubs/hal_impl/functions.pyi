"""
This type stub file was generated by pyright.
"""

import logging
from . import types
from .sim_hooks import SimHooks
from typing import Any, Optional

"""
This type stub file was generated by pyright.
"""
logger = logging.getLogger("hal")
hooks = SimHooks()
_initialized = False
def reset_hal():
    ...

CTR_RxTimeout = 1
CTR_TxTimeout = 2
CTR_InvalidParamValue = 3
CTR_UnexpectedArbId = 4
CTR_TxFailed = 5
CTR_SigNotUpdated = 6
NiFpga_Status_FifoTimeout = - 50400
NiFpga_Status_TransferAborted = - 50405
NiFpga_Status_MemoryFull = - 52000
NiFpga_Status_SoftwareFault = - 52003
NiFpga_Status_InvalidParameter = - 52005
NiFpga_Status_ResourceNotFound = - 52006
NiFpga_Status_ResourceNotInitialized = - 52010
NiFpga_Status_HardwareFault = - 52018
NiFpga_Status_IrqTimeout = - 61060
ERR_CANSessionMux_InvalidBuffer = - 44408
ERR_CANSessionMux_MessageNotFound = - 44087
WARN_CANSessionMux_NoToken = 44087
ERR_CANSessionMux_NotAllowed = - 44088
ERR_CANSessionMux_NotInitialized = - 44089
SAMPLE_RATE_TOO_HIGH = 1001
VOLTAGE_OUT_OF_RANGE = 1002
LOOP_TIMING_ERROR = 1004
SPI_WRITE_NO_MOSI = 1012
SPI_READ_NO_MISO = 1013
SPI_READ_NO_DATA = 1014
INCOMPATIBLE_STATE = 1015
NO_AVAILABLE_RESOURCES = - 1004
NULL_PARAMETER = - 1005
ANALOG_TRIGGER_LIMIT_ORDER_ERROR = - 1010
ANALOG_TRIGGER_PULSE_OUTPUT_ERROR = - 1011
PARAMETER_OUT_OF_RANGE = - 1028
RESOURCE_IS_ALLOCATED = - 1029
RESOURCE_OUT_OF_RANGE = - 1030
HAL_INVALID_ACCUMULATOR_CHANNEL = - 1035
HAL_COUNTER_NOT_SUPPORTED = - 1058
HAL_PWM_SCALE_ERROR = - 1072
HAL_HANDLE_ERROR = - 1098
kSystemClockTicksPerMicrosecond = 40
kNumAccumulators = 2
kNumAnalogTriggers = 8
kNumAnalogInputs = 8
kNumAnalogOutputs = 2
kNumCounters = 8
kNumDigitalHeaders = 10
kNumDigitalMXPChannels = 16
kNumDigitalSPIPortChannels = 5
kNumPWMHeaders = 10
kNumDigitalChannels = kNumDigitalHeaders + kNumDigitalMXPChannels + kNumDigitalSPIPortChannels
kNumPWMChannels = 10 + kNumPWMHeaders
kNumDigitalPWMOutputs = 4 + 2
kNumEncoders = 8
kNumInterrupts = 8
kNumRelayChannels = 8
kNumRelayHeaders = int(kNumRelayChannels / 2)
kNumPCMModules = 63
kNumSolenoidChannels = 8
kNumPDPModules = 63
kNumPDPChannels = 16
kAccumulatorChannels = [0, 1]
def _initport(name, idx, status, root=...):
    ...

def sleep(s):
    ...

def getPort(channel):
    ...

def getPortWithModule(module, channel):
    ...

def _getErrorMessage(code):
    ...

def getErrorMessage(code):
    ...

def getFPGAVersion(status):
    ...

def getFPGARevision(status):
    ...

def getFPGATime(status):
    ...

def getRuntimeType():
    ...

def getFPGAButton(status):
    ...

def getSystemActive(status):
    ...

def getBrownedOut(status):
    ...

def baseInitialize(status):
    ...

def initialize(timeout=..., mode=...):
    ...

def report(resource, instanceNumber, context=..., feature: Optional[Any] = ...):
    ...

def setAccelerometerActive(active):
    ...

def setAccelerometerRange(range):
    ...

def getAccelerometerX():
    ...

def getAccelerometerY():
    ...

def getAccelerometerZ():
    ...

def isAccumulatorChannel(analogPortHandle, status):
    ...

def initAccumulator(analogPortHandle, status):
    ...

def resetAccumulator(analogPortHandle, status):
    ...

def setAccumulatorCenter(analogPortHandle, center, status):
    ...

def setAccumulatorDeadband(analogPortHandle, deadband, status):
    ...

def getAccumulatorValue(analogPortHandle, status):
    ...

def getAccumulatorCount(analogPortHandle, status):
    ...

def getAccumulatorOutput(analogPortHandle, status):
    ...

def initializeAnalogGyro(handle, status):
    ...

def setupAnalogGyro(handle, status):
    ...

def freeAnalogGyro(handle):
    ...

def setAnalogGyroParameters(handle, voltsPerDegreePerSecond, offset, center, status):
    ...

def setAnalogGyroVoltsPerDegreePerSecond(handle, voltsPerDegreePerSecond, status):
    ...

def resetAnalogGyro(handle, status):
    ...

def calibrateAnalogGyro(handle, status):
    ...

def setAnalogGyroDeadband(handle, volts, status):
    ...

def getAnalogGyroAngle(handle, status):
    ...

def getAnalogGyroRate(handle, status):
    ...

def getAnalogGyroOffset(handle, status):
    ...

def getAnalogGyroCenter(handle, status):
    ...

def initializeAnalogInputPort(portHandle, status):
    ...

def freeAnalogInputPort(analogPortHandle):
    ...

def checkAnalogModule(module):
    ...

def checkAnalogInputChannel(channel):
    ...

def setAnalogSampleRate(samplesPerSecond, status):
    ...

def getAnalogSampleRate(status):
    ...

def setAnalogAverageBits(analogPortHandle, bits, status):
    ...

def getAnalogAverageBits(analogPortHandle, status):
    ...

def setAnalogOversampleBits(analogPortHandle, bits, status):
    ...

def getAnalogOversampleBits(analogPortHandle, status):
    ...

def getAnalogValue(analogPortHandle, status):
    ...

def getAnalogAverageValue(analogPortHandle, status):
    ...

def getAnalogVoltsToValue(analogPortHandle, voltage, status):
    ...

def getAnalogVoltage(analogPortHandle, status):
    ...

def getAnalogAverageVoltage(analogPortHandle, status):
    ...

def getAnalogLSBWeight(analogPortHandle, status):
    ...

def getAnalogOffset(analogPortHandle, status):
    ...

kTimebase = 40000000
kDefaultOversampleBits = 0
kDefaultAverageBits = 7
kDefaultSampleRate = 50000
def initializeAnalogOutputPort(portHandle, status):
    ...

def freeAnalogOutputPort(analogOutputHandle):
    ...

def setAnalogOutput(analogOutputHandle, voltage, status):
    ...

def getAnalogOutput(analogOutputHandle, status):
    ...

def checkAnalogOutputChannel(channel):
    ...

def initializeAnalogTrigger(portHandle, status):
    ...

def cleanAnalogTrigger(analogTriggerHandle, status):
    ...

def setAnalogTriggerLimitsRaw(analogTriggerHandle, lower, upper, status):
    ...

def setAnalogTriggerLimitsVoltage(analogTriggerHandle, lower, upper, status):
    ...

def setAnalogTriggerAveraged(analogTriggerHandle, useAveragedValue, status):
    ...

def setAnalogTriggerFiltered(analogTriggerHandle, useFilteredValue, status):
    ...

def _get_trigger_value(analogTriggerHandle):
    ...

def getAnalogTriggerInWindow(analogTriggerHandle, status):
    ...

def getAnalogTriggerTriggerState(analogTriggerHandle, status):
    ...

def getAnalogTriggerOutput(analogTriggerHandle, type, status):
    ...

def CAN_SendMessage(messageID: int, data: bytes, dataSize: int, periodMs: int, status) -> None:
    ...

def CAN_ReceiveMessage(messageIDMask: int, data: bytearray, status):
    ...

def CAN_OpenStreamSession(messageID: int, messageIDMask: int, maxMessages: int, status) -> int:
    ...

def CAN_CloseStreamSession(sessionHandle: int) -> None:
    ...

def CAN_ReadStreamSession(sessionHandle, messages, messagesToRead, status):
    ...

def CAN_GetCANStatus(status):
    ...

def initializeCAN(manufacturer, deviceId, deviceType, status) -> types.CANHandle:
    ...

def cleanCAN(handle: types.CANHandle) -> None:
    ...

def writeCANPacket(handle, data, length, apiId, status) -> None:
    ...

def writeCANPacketRepeating(handle, data, length, apiId, repeatMs, status):
    ...

def stopCANPacketRepeating(handle: types.CANHandle, apiId: int, status) -> None:
    ...

def readCANPacketNew(handle, apiId, data, status):
    ...

def readCANPacketLatest(handle, apiId, data, status):
    ...

def readCANPacketTimeout(handle, apiId, data, timeoutMs, status):
    ...

def readCANPeriodicPacket(handle, apiId, data, timeoutMs, periodMs, status):
    ...

def initializeCompressor(module, status):
    ...

def checkCompressorModule(module):
    ...

def getCompressor(compressorHandle, status):
    ...

def setCompressorClosedLoopControl(compressorHandle, value, status):
    ...

def getCompressorClosedLoopControl(compressorHandle, status):
    ...

def getCompressorPressureSwitch(compressorHandle, status):
    ...

def getCompressorCurrent(compressorHandle, status):
    ...

def getCompressorCurrentTooHighFault(compressorHandle, status):
    ...

def getCompressorCurrentTooHighStickyFault(compressorHandle, status):
    ...

def getCompressorShortedFault(compressorHandle, status):
    ...

def getCompressorShortedStickyFault(compressorHandle, status):
    ...

def getCompressorNotConnectedFault(compressorHandle, status):
    ...

def getCompressorNotConnectedStickyFault(compressorHandle, status):
    ...

def getSystemClockTicksPerMicrosecond():
    ...

def initializeCounter(mode, status):
    ...

def freeCounter(counterHandle, status):
    ...

def setCounterAverageSize(counterHandle, size, status):
    ...

def setCounterUpSource(counterHandle, digitalSourceHandle, analogTriggerType, status):
    ...

def setCounterUpSourceEdge(counterHandle, risingEdge, fallingEdge, status):
    ...

def clearCounterUpSource(counterHandle, status):
    ...

def setCounterDownSource(counterHandle, digitalSourceHandle, analogTriggerType, status):
    ...

def setCounterDownSourceEdge(counterHandle, risingEdge, fallingEdge, status):
    ...

def clearCounterDownSource(counterHandle, status):
    ...

def setCounterUpDownMode(counterHandle, status):
    ...

def setCounterExternalDirectionMode(counterHandle, status):
    ...

def setCounterSemiPeriodMode(counterHandle, highSemiPeriod, status):
    ...

def setCounterPulseLengthMode(counterHandle, threshold, status):
    ...

def getCounterSamplesToAverage(counterHandle, status):
    ...

def setCounterSamplesToAverage(counterHandle, samplesToAverage, status):
    ...

def resetCounter(counterHandle, status):
    ...

def getCounter(counterHandle, status):
    ...

def getCounterPeriod(counterHandle, status):
    ...

def setCounterMaxPeriod(counterHandle, maxPeriod, status):
    ...

def setCounterUpdateWhenEmpty(counterHandle, enabled, status):
    ...

def getCounterStopped(counterHandle, status):
    ...

def getCounterDirection(counterHandle, status):
    ...

def setCounterReverseDirection(counterHandle, reverseDirection, status):
    ...

kExpectedLoopTiming = 40
def _remapMXPChannel(pin):
    ...

def _remapMXPPWMChannel(pin):
    ...

def _remapSPIChannel(pin):
    ...

def initializeDIOPort(portHandle, input, status):
    ...

def checkDIOChannel(channel):
    ...

def freeDIOPort(dioPortHandle):
    ...

def allocateDigitalPWM(status):
    ...

def freeDigitalPWM(pwmGenerator, status):
    ...

def setDigitalPWMRate(rate, status):
    ...

def setDigitalPWMDutyCycle(pwmGenerator, dutyCycle, status):
    ...

def setDigitalPWMOutputChannel(pwmGenerator, channel, status):
    ...

def setDIO(dioPortHandle, value, status):
    ...

def setDIODirection(dioPortHandle, input, status):
    ...

def getDIO(dioPortHandle, status):
    ...

def getDIODirection(dioPortHandle, status):
    ...

def pulse(dioPortHandle, pulseLength, status):
    ...

def isPulsing(dioPortHandle, status):
    ...

def isAnyPulsing(status):
    ...

def setFilterSelect(dioPortHandle, filterIndex, status):
    ...

def getFilterSelect(dioPortHandle, status):
    ...

def setFilterPeriod(filterIndex, value, status):
    ...

def getFilterPeriod(filterIndex, status):
    ...

def setErrorData(errors, errorsLength, waitMs):
    ...

def sendError(isError, errorCode, isLVCode, details, location, callStack, printMsg):
    ...

def getControlWord(controlWord):
    ...

def getAllianceStation(status):
    ...

def getJoystickAxes(joystickNum, axes):
    ...

def getJoystickPOVs(joystickNum, povs):
    ...

def getJoystickButtons(joystickNum, buttons):
    ...

def getJoystickDescriptor(joystickNum, desc):
    ...

def getJoystickIsXbox(joystickNum):
    ...

def getJoystickType(joystickNum):
    ...

def getJoystickName(joystickNum):
    ...

def freeJoystickName(name):
    ...

def getJoystickAxisType(joystickNum, axis):
    ...

def setJoystickOutputs(joystickNum, outputs, leftRumble, rightRumble):
    ...

def getMatchTime(status):
    """
        Returns approximate match time:
        - At beginning of autonomous, time is 0
        - At beginning of teleop, time is set to 15
        - If robot is disabled, time is 0
    """
    ...

def getMatchInfo(info):
    ...

def freeMatchInfo(info):
    ...

def releaseDSMutex():
    ...

def isNewControlData():
    ...

def waitForDSData():
    ...

def waitForDSDataTimeout(timeout):
    ...

def initializeDriverStation():
    ...

def observeUserProgramStarting():
    ...

def observeUserProgramDisabled():
    ...

def observeUserProgramAutonomous():
    ...

def observeUserProgramTeleop():
    ...

def observeUserProgramTest():
    ...

def initializeEncoder(digitalSourceHandleA, analogTriggerTypeA, digitalSourceHandleB, analogTriggerTypeB, reverseDirection, encodingType, status):
    ...

def freeEncoder(encoderHandle, status):
    ...

def getEncoder(encoderHandle, status):
    ...

def getEncoderRaw(encoderHandle, status):
    ...

def getEncoderEncodingScale(encoderHandle, status):
    ...

def resetEncoder(encoderHandle, status):
    ...

def getEncoderPeriod(encoderHandle, status):
    ...

def setEncoderMaxPeriod(encoderHandle, maxPeriod, status):
    ...

def getEncoderStopped(encoderHandle, status):
    ...

def getEncoderDirection(encoderHandle, status):
    ...

def getEncoderDistance(encoderHandle, status):
    ...

def getEncoderRate(encoderHandle, status):
    ...

def setEncoderMinRate(encoderHandle, minRate, status):
    ...

def setEncoderDistancePerPulse(encoderHandle, distancePerPulse, status):
    ...

def setEncoderReverseDirection(encoderHandle, reverseDirection, status):
    ...

def setEncoderSamplesToAverage(encoderHandle, samplesToAverage, status):
    ...

def getEncoderSamplesToAverage(encoderHandle, status):
    ...

def setEncoderIndexSource(encoderHandle, digitalSourceHandle, analogTriggerType, type, status):
    ...

def getEncoderFPGAIndex(encoderHandle, status):
    ...

def getEncoderDecodingScaleFactor(encoderHandle, status):
    ...

def getEncoderDistancePerPulse(encoderHandle, status):
    ...

def getEncoderEncodingType(encoderHandle, status):
    ...

def loadOneExtension(library):
    ...

def loadExtensions():
    ...

def initializeI2C(port, status):
    ...

def transactionI2C(port, deviceAddress, dataToSend, sendSize, dataReceived, receiveSize):
    ...

def writeI2C(port, deviceAddress, dataToSend, sendSize):
    ...

def readI2C(port, deviceAddress, buffer, count):
    ...

def closeI2C(port):
    ...

def initializeInterrupts(watcher, status):
    ...

def cleanInterrupts(interruptHandle, status):
    ...

def waitForInterrupt(interruptHandle, timeout, ignorePrevious, status):
    ...

def enableInterrupts(interruptHandle, status):
    ...

def disableInterrupts(interruptHandle, status):
    ...

def readInterruptRisingTimestamp(interruptHandle, status):
    ...

def readInterruptFallingTimestamp(interruptHandle, status):
    ...

def requestInterrupts(interruptHandle, digitalSourceHandle, analogTriggerType, status):
    ...

def attachInterruptHandler(interruptHandle, handler, param, status):
    ...

def attachInterruptHandlerThreaded(interruptHandle, handler, param, status):
    ...

def setInterruptUpSourceEdge(interruptHandle, risingEdge, fallingEdge, status):
    ...

def initializeNotifier(status):
    ...

def stopNotifier(notifierHandle, status):
    ...

def cleanNotifier(notifierHandle, status):
    ...

def updateNotifierAlarm(notifierHandle, triggerTime, status):
    ...

def cancelNotifierAlarm(notifierHandle, status):
    ...

def waitForNotifierAlarm(notifierHandle, status):
    ...

def initializePDP(module, status):
    ...

def cleanPDP(handle):
    ...

def checkPDPChannel(channel):
    ...

def checkPDPModule(module):
    ...

def getPDPTemperature(handle, status):
    ...

def getPDPVoltage(handle, status):
    ...

def getPDPChannelCurrent(handle, channel, status):
    ...

def getPDPTotalCurrent(handle, status):
    ...

def getPDPTotalPower(handle, status):
    ...

def getPDPTotalEnergy(handle, status):
    ...

def resetPDPTotalEnergy(handle, status):
    ...

def clearPDPStickyFaults(handle, status):
    ...

def initializePWMPort(portHandle, status):
    ...

def freePWMPort(pwmPortHandle, status):
    ...

def checkPWMChannel(channel):
    ...

def setPWMConfig(pwmPortHandle, maxPwm, deadbandMaxPwm, centerPwm, deadbandMinPwm, minPwm, status):
    ...

def setPWMConfigRaw(pwmPortHandle, maxPwm, deadbandMaxPwm, centerPwm, deadbandMinPwm, minPwm, status):
    ...

def getPWMConfigRaw(pwmPortHandle, status):
    ...

def setPWMEliminateDeadband(pwmPortHandle, eliminateDeadband, status):
    ...

def getPWMEliminateDeadband(pwmPortHandle, status):
    ...

def setPWMRaw(pwmPortHandle, value, status):
    ...

def setPWMSpeed(pwmPortHandle, speed, status):
    ...

def setPWMPosition(pwmPortHandle, position, status):
    ...

def setPWMDisabled(pwmPortHandle, status):
    ...

def getPWMRaw(pwmPortHandle, status):
    ...

def getPWMSpeed(pwmPortHandle, status):
    ...

def getPWMPosition(pwmPortHandle, status):
    ...

def latchPWMZero(pwmPortHandle, status):
    ...

def setPWMPeriodScale(pwmPortHandle, squelchMask, status):
    ...

def getPWMLoopTiming(status):
    ...

def getPWMCycleStartTime(status):
    ...

def getNumAccumulators():
    ...

def getNumAnalogTriggers():
    ...

def getNumAnalogInputs():
    ...

def getNumAnalogOutputs():
    ...

def getNumCounters():
    ...

def getNumDigitalHeaders():
    ...

def getNumPWMHeaders():
    ...

def getNumDigitalChannels():
    ...

def getNumPWMChannels():
    ...

def getNumDigitalPWMOutputs():
    ...

def getNumEncoders():
    ...

def getNumInterrupts():
    ...

def getNumRelayChannels():
    ...

def getNumRelayHeaders():
    ...

def getNumPCMModules():
    ...

def getNumSolenoidChannels():
    ...

def getNumPDPModules():
    ...

def getNumPDPChannels():
    ...

def getVinVoltage(status):
    ...

def getVinCurrent(status):
    ...

def getUserVoltage6V(status):
    ...

def getUserCurrent6V(status):
    ...

def getUserActive6V(status):
    ...

def getUserCurrentFaults6V(status):
    ...

def getUserVoltage5V(status):
    ...

def getUserCurrent5V(status):
    ...

def getUserActive5V(status):
    ...

def getUserCurrentFaults5V(status):
    ...

def getUserVoltage3V3(status):
    ...

def getUserCurrent3V3(status):
    ...

def getUserActive3V3(status):
    ...

def getUserCurrentFaults3V3(status):
    ...

def _handle_to_channel(relayPortHandle):
    ...

def initializeRelayPort(portHandle, fwd, status):
    ...

def freeRelayPort(relayPortHandle):
    ...

def checkRelayChannel(channel):
    ...

def setRelay(relayPortHandle, on, status):
    ...

def getRelay(relayPortHandle, status):
    ...

def initializeSPI(port, status):
    ...

def transactionSPI(port, dataToSend, dataReceived, size):
    ...

def writeSPI(port, dataToSend, sendSize):
    ...

def readSPI(port, buffer, count):
    ...

def closeSPI(port):
    ...

def setSPISpeed(port, speed):
    ...

def setSPIOpts(port, msbFirst, sampleOnTrailing, clkIdleHigh):
    ...

def setSPIChipSelectActiveHigh(port, status):
    ...

def setSPIChipSelectActiveLow(port, status):
    ...

def getSPIHandle(port):
    ...

def setSPIHandle(port, handle):
    ...

def initSPIAuto(port, bufferSize, status):
    ...

def freeSPIAuto(port, status):
    ...

def startSPIAutoRate(port, period, status):
    ...

def startSPIAutoTrigger(port, digitalSourceHandle, analogTriggerType, triggerRising, triggerFalling, status):
    ...

def stopSPIAuto(port, status):
    ...

def setSPIAutoTransmitData(port, dataToSend, dataSize, zeroSize, status):
    ...

def forceSPIAutoRead(port, status):
    ...

def readSPIAutoReceivedData(port, buffer, numToRead, timeout, status):
    ...

def getSPIAutoDroppedCount(port, status):
    ...

def initializeSerialPort(port, status):
    ...

def initializeSerialPortDirect(port, portName, status):
    ...

def setSerialBaudRate(port, baud, status):
    ...

def setSerialDataBits(port, bits, status):
    ...

def setSerialParity(port, parity, status):
    ...

def setSerialStopBits(port, stopBits, status):
    ...

def setSerialWriteMode(port, mode, status):
    ...

def setSerialFlowControl(port, flow, status):
    ...

def setSerialTimeout(port, timeout, status):
    ...

def enableSerialTermination(port, terminator, status):
    ...

def disableSerialTermination(port, status):
    ...

def setSerialReadBufferSize(port, size, status):
    ...

def setSerialWriteBufferSize(port, size, status):
    ...

def getSerialBytesReceived(port, status):
    ...

def readSerial(port, buffer, count, status):
    ...

def writeSerial(port, buffer, count, status):
    ...

def flushSerial(port, status):
    ...

def clearSerial(port, status):
    ...

def closeSerial(port, status):
    ...

def initializeSolenoidPort(portHandle, status):
    ...

def freeSolenoidPort(solenoidPortHandle):
    ...

def checkSolenoidModule(module):
    ...

def checkSolenoidChannel(channel):
    ...

def getSolenoid(solenoidPortHandle, status):
    ...

def getAllSolenoids(module, status):
    ...

def setSolenoid(solenoidPortHandle, value, status):
    ...

def setAllSolenoids(module, state, status):
    ...

def getPCMSolenoidBlackList(module, status):
    ...

def getPCMSolenoidVoltageStickyFault(module, status):
    ...

def getPCMSolenoidVoltageFault(module, status):
    ...

def clearAllPCMStickyFaults(module, status):
    ...

def setOneShotDuration(solenoidPortHandle, durMS, status):
    ...

def fireOneShot(solenoidPortHandle, status):
    ...

