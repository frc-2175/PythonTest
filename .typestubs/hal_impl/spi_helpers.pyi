"""
This type stub file was generated by pyright.
"""

from . import data

"""
This type stub file was generated by pyright.
"""
hal_data = data.hal_data
class SPISimBase:
    """
        Base class to use for SPI protocol simulators.

        Has all functions that need to be implemented, but throws exceptions
        when data is asked of it. Will throw away set* function data, as most
        low-fidelity simulation will probably not care about such things.
    """
    def initializeSPI(self, port, status):
        self.port = ...
    
    def transactionSPI(self, port, dataToSend, dataReceived, size):
        """
            Writes data to the I2C device and then reads from it. You can read
            bytes from the ``dataToSend`` parameter. To return data,
            you need to write bytes to the ``data_received`` parameter.
            object.
            
            A simple example of returning 3 bytes might be::
            
                def transactionSPI(self, port, dataToSend, dataReceived, size):
                    dataReceived[:] = b'123'
                    return len(dataReceived)
            
            :returns: number of bytes returned
        """
        ...
    
    def writeSPI(self, port, dataToSend, sendSize):
        """:returns: number of bytes written"""
        ...
    
    def readSPI(self, port, buffer, count):
        """
            Reads data from the SPI device. To return data to your code, you
            need to write bytes to the ``buffer`` parameter. A simple example of
            returning 3 bytes might be::
            
                def readSPI(self, port, buffer, count):
                    buffer[:] = b'123'
                    return len(buffer)
            
            :returns: number of bytes read
        """
        ...
    
    def closeSPI(self, port):
        ...
    
    def setSPISpeed(self, port, speed):
        ...
    
    def setSPIOpts(self, port, msbFirst, sampleOnTrailing, clkIdleHigh):
        ...
    
    def setSPIChipSelectActiveHigh(self, port, status):
        ...
    
    def setSPIChipSelectActiveLow(self, port, status):
        ...
    
    def getSPIHandle(self, port):
        ...
    
    def setSPIHandle(self, port, handle):
        ...
    
    def initSPIAuto(self, port, bufferSize, status):
        ...
    
    def freeSPIAuto(self, port, status):
        ...
    
    def startSPIAutoRate(self, port, period, status):
        ...
    
    def startSPIAutoTrigger(self, port, digitalSourceHandle, analogTriggerType, triggerRising, triggerFalling, status):
        ...
    
    def stopSPIAuto(self, port, status):
        ...
    
    def setSPIAutoTransmitData(self, port, dataToSend, dataSize, zeroSize, status):
        ...
    
    def forceSPIAutoRead(self, port, status):
        ...
    
    def readSPIAutoReceivedData(self, port, buffer, numToRead, timeout, status):
        """:returns: number of bytes read"""
        ...
    
    def getSPIAutoDroppedCount(self, port, status):
        """:returns: int32"""
        ...
    


class ADXRS450_Gyro_Sim(SPISimBase):
    """
        This returns the angle of the gyro as the value of::

            hal_data['robot']['adxrs450_spi_%d_angle']

        Where %d is the i2c port number. Angle should be in degrees.
    """
    def __init__(self, gyro):
        self.kDegreePerSecondPerLSB = ...
        self.kSamplePeriodUs = ...
        self.lastAngle = ...
        self.lastTimestamp = ...
    
    def initializeSPI(self, port, status):
        self.angle_key = ...
        self.rate_key = ...
    
    def setSPIAutoTransmitData(self, port, data_to_send, sendSize, zeroSize, status):
        ...
    
    def readSPIAutoReceivedData(self, port, buffer, numToRead, timeout, status):
        """:returns: number of bytes read"""
        ...
    
    def readSPI(self, port, buffer, count):
        ...
    


