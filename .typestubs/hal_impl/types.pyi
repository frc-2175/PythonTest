"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
This type stub file was generated by pyright.
"""
__all__ = ["ControlWord", "ControlWord_ptr", "JoystickAxes", "JoystickAxes_ptr", "JoystickPOVs", "JoystickPOVs_ptr", "JoystickButtons", "JoystickButtons_ptr", "JoystickDescriptor", "JoystickDescriptor_ptr", "CANStreamMessage", "CANStreamMessage_ptr", "Handle", "PortHandle", "AnalogInputHandle", "AnalogOutputHandle", "AnalogTriggerHandle", "CANHandle", "CompressorHandle", "CounterHandle", "DigitalHandle", "DigitalPWMHandle", "EncoderHandle", "FPGAEncoderHandle", "GyroHandle", "InterruptHandle", "NotifierHandle", "PDPHandle", "RelayHandle", "SolenoidHandle"]
class _fakeptr(object):
    fake_pointer = ...


def fake_pointer(orig_obj, name: Optional[Any] = ...):
    ...

class ControlWord:
    ENABLED_FIELD = ...
    AUTO_FIELD = ...
    TEST_FIELD = ...
    EMERGENCY_STOP_FIELD = ...
    FMS_ATTACHED_FIELD = ...
    DS_ATTACHED_FIELD = ...
    def __init__(self):
        self.enabled = ...
        self.autonomous = ...
        self.test = ...
        self.eStop = ...
        self.fmsAttached = ...
        self.dsAttached = ...
    
    @property
    def bits(self) -> int:
        ...
    


ControlWord_ptr = fake_pointer(ControlWord)
class JoystickAxes:
    __slots__ = ...
    def __init__(self):
        self.count = ...
        self.axes = ...
    


JoystickAxes_ptr = fake_pointer(JoystickAxes)
class JoystickPOVs:
    __slots__ = ...
    def __init__(self):
        self.count = ...
        self.povs = ...
    


JoystickPOVs_ptr = fake_pointer(JoystickPOVs)
class JoystickButtons:
    __slots__ = ...
    def __init__(self):
        self.count = ...
        self.buttons = ...
    


JoystickButtons_ptr = fake_pointer(JoystickButtons)
class JoystickDescriptor:
    __slots__ = ...
    def __init__(self, d=...):
        self.isXbox = ...
        self.type = ...
        self.name = ...
        self.axisCount = ...
        self.buttonCount = ...
    


JoystickDescriptor_ptr = fake_pointer(JoystickDescriptor)
class MatchInfo:
    __slots__ = ...
    def __init__(self, *, eventName: bytes = ..., gameSpecificMessage: bytes = ...) -> None:
        self.eventName = ...
        self.gameSpecificMessage = ...
    


MatchInfo_ptr = fake_pointer(MatchInfo)
class CANStreamMessage:
    __slots__ = ...
    def __init__(self):
        self.messageID = ...
        self.timeStamp = ...
        self.data = ...
        self.dataSize = ...
    


CANStreamMessage_ptr = fake_pointer(CANStreamMessage)
class Handle:
    __slots__ = ...


class PortHandle(Handle):
    __slots__ = ...
    def __init__(self, pin, module):
        self.pin = ...
        self.module = ...
    
    def __repr__(self):
        ...
    


class AnalogInputHandle(Handle):
    __slots__ = ...
    def __init__(self, port):
        self.pin = ...
    
    def __repr__(self):
        ...
    


class AnalogOutputHandle(Handle):
    __slots__ = ...
    def __init__(self, port):
        self.pin = ...
    
    def __repr__(self):
        ...
    


class AnalogTriggerHandle(Handle):
    __slots__ = ...
    def __init__(self, port, index):
        self.pin = ...
        self.index = ...
    
    def __repr__(self):
        ...
    


class CANHandle(Handle):
    __slots__ = ...
    def __init__(self, manufacturer: int, deviceId: int, deviceType: int) -> None:
        self.manufacturer = ...
        self.deviceId = ...
        self.deviceType = ...
    
    def __repr__(self):
        ...
    


class CompressorHandle(Handle):
    __slots__ = ...
    def __init__(self, module):
        self.module = ...
    
    def __repr__(self):
        ...
    


class CounterHandle(Handle):
    __slots__ = ...
    def __init__(self, idx):
        self.idx = ...
    
    def __repr__(self):
        ...
    


class DigitalHandle(Handle):
    __slots__ = ...
    def __init__(self, port):
        self.pin = ...
    
    def __repr__(self):
        ...
    


class DigitalPWMHandle(Handle):
    __slots__ = ...
    def __init__(self, portHandle):
        self.pin = ...
    
    def __repr__(self):
        ...
    


class EncoderHandle(Handle):
    __slots__ = ...
    def __init__(self, idx):
        self.idx = ...
    
    def __repr__(self):
        ...
    


class FPGAEncoderHandle(Handle):
    ...


class GyroHandle(Handle):
    __slots__ = ...
    def __init__(self, port):
        self.pin = ...
    
    def __repr__(self):
        ...
    


class InterruptHandle(Handle):
    ...


class NotifierHandle(Handle):
    def __init__(self):
        self.waitTime = ...
        self.updatedAlarm = ...
        self.active = ...
        self.running = ...
        self.lock = ...
    


class PDPHandle(Handle):
    __slots__ = ...
    def __init__(self, module):
        self.module = ...
    
    def __repr__(self):
        ...
    


class RelayHandle(Handle):
    __slots__ = ...
    def __init__(self, pin):
        self.pin = ...
    
    def __repr__(self):
        ...
    


class SolenoidHandle(Handle):
    __slots__ = ...
    def __init__(self, port):
        self.module = ...
        self.pin = ...
    
    def __repr__(self):
        ...
    


