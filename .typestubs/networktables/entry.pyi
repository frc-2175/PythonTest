"""
This type stub file was generated by pyright.
"""

__all__ = ["NetworkTableEntry"]
class NetworkTableEntry(object):
    """
        Holds a value from NetworkTables, and changes it as new entries
        come in. Do not create this object directly, use
        :func:`.NetworkTablesInstance.getEntry` or :meth:`.NetworkTable.getEntry`
        to obtain an instance of this class.
        
        Using NetworkTableEntry objects to access/change NT values is more
        efficient than the getX/putX methods of :class:`.NetworkTable`.
    
        .. versionadded:: 2018.0.0
    """
    __slots__ = ...
    def __init__(self, api, local_id, key):
        self.key = ...
    
    def getHandle(self):
        """Gets the native handle for the entry"""
        ...
    
    def exists(self):
        """Determines if the entry currently exists"""
        ...
    
    def getName(self):
        """Gets the name of the entry (the key)"""
        ...
    
    def getType(self):
        """Gets the type of the entry
        
        :rtype: :class:`.NetworkTablesInstance.EntryTypes`
        """
        ...
    
    def getFlags(self):
        """Returns the flags.
        
        :returns: the flags (bitmask)
        """
        ...
    
    def getInfo(self):
        """Gets combined information about the entry.
        
        :returns: Entry information
        :rtype: tuple of (name, type, flags)
        """
        ...
    
    @property
    def value(self):
        """Property to access the value of this entry, or None if the entry
        hasn't been initialized yet (use setXXX or forceXXX)
        """
        ...
    
    def get(self):
        ...
    
    def getBoolean(self, defaultValue):
        """Gets the entry's value as a boolean. If the entry does not exist or is of
        different type, it will return the default value.
        
        :param defaultValue: the value to be returned if no value is found
        :returns: the entry's value or the given default value
        :rtype: bool
        """
        ...
    
    def getDouble(self, defaultValue):
        """Gets the entry's value as a double. If the entry does not exist or is of
        different type, it will return the default value.
        
        :param defaultValue: the value to be returned if no value is found
        :returns: the entry's value or the given default value
        :rtype: float
        """
        ...
    
    getNumber = ...
    def getString(self, defaultValue):
        """Gets the entry's value as a string. If the entry does not exist or is of
        different type, it will return the default value.
        
        :param defaultValue: the value to be returned if no value is found
        :returns: the entry's value or the given default value
        :rtype: str
        """
        ...
    
    def getRaw(self, defaultValue):
        """Gets the entry's value as a raw value (byte array). If the entry does not
        exist or is of different type, it will return the default value.
        
        :param defaultValue: the value to be returned if no value is found
        :returns: the entry's value or the given default value
        :rtype: bytes
        """
        ...
    
    def getBooleanArray(self, defaultValue):
        """Gets the entry's value as a boolean array. If the entry does not
        exist or is of different type, it will return the default value.
        
        :param defaultValue: the value to be returned if no value is found
        :returns: the entry's value or the given default value
        :rtype: list(bool)
        """
        ...
    
    def getDoubleArray(self, defaultValue):
        """Gets the entry's value as a double array. If the entry does not
        exist or is of different type, it will return the default value.
        
        :param defaultValue: the value to be returned if no value is found
        :returns: the entry's value or the given default value
        :rtype: list(float)
        """
        ...
    
    def getStringArray(self, defaultValue):
        """Gets the entry's value as a string array. If the entry does not
        exist or is of different type, it will return the default value.
        
        :param defaultValue: the value to be returned if no value is found
        :returns: the entry's value or the given default value
        :rtype: list(float)
        """
        ...
    
    @classmethod
    def isValidDataType(cls, data):
        ...
    
    def setDefaultValue(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        
        .. warning:: Do not set an empty list, it will fail
        """
        ...
    
    def setDefaultBoolean(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setDefaultDouble(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    setDefaultNumber = ...
    def setDefaultString(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setDefaultRaw(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setDefaultBooleanArray(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setDefaultDoubleArray(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    setDefaultNumberArray = ...
    def setDefaultStringArray(self, defaultValue):
        """Sets the entry's value if it does not exist.
        
        :param defaultValue: the default value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setValue(self, value):
        """Sets the entry's value
        
        :param value: the value that will be assigned
        :returns: False if the table key already exists with a different type
        
        .. warning:: Empty lists will fail
        """
        ...
    
    def setBoolean(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setDouble(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    setNumber = ...
    def setString(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setRaw(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setBooleanArray(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def setDoubleArray(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    setNumberArray = ...
    def setStringArray(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        :returns: False if the entry exists with a different type
        """
        ...
    
    def forceSetValue(self, value):
        """Sets the entry's value
        
        :param value: the value that will be assigned
        
        .. warning:: Empty lists will fail
        """
        ...
    
    def forceSetBoolean(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        """
        ...
    
    def forceSetDouble(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        """
        ...
    
    forceSetNumber = ...
    def forceSetString(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        """
        ...
    
    def forceSetRaw(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        """
        ...
    
    def forceSetBooleanArray(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        """
        ...
    
    def forceSetDoubleArray(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        """
        ...
    
    forceSetNumberArray = ...
    def forceSetStringArray(self, value):
        """Sets the entry's value.
        
        :param value: the value to set
        """
        ...
    
    def setFlags(self, flags):
        """Sets flags.
        
        :param flags: the flags to set (bitmask)
        """
        ...
    
    def clearFlags(self, flags):
        """Clears flags
        
        :param flags: the flags to clear (bitmask)
        """
        ...
    
    def setPersistent(self):
        """Make value persistent through program restarts."""
        ...
    
    def clearPersistent(self):
        """Stop making value persistent through program restarts."""
        ...
    
    def isPersistent(self):
        """Returns whether the value is persistent through program restarts.
        
        :returns: True if the value is persistent.
        """
        ...
    
    def delete(self):
        """Deletes the entry."""
        ...
    
    def addListener(self, listener, flags, paramIsNew: bool = ...):
        """Add a listener for changes to the entry
        
        :param listener: the listener to add
        :type listener: `callable(entry, key, value, param)`
        :param flags: bitmask specifying desired notifications
        :type flags: :class:`.NetworkTablesInstance.NotifyFlags`
        :param paramIsNew: If True, the listener fourth parameter is a boolean set to True
                           if the listener is being called because of a new value in the
                           table. Otherwise, the parameter is an integer of the raw
                           `NT_NOTIFY_*` flags
        :type paramIsNew: bool
        
        :returns: listener handle
        """
        ...
    
    def removeListener(self, listener_id):
        """Remove a listener from receiving entry events
        
        :param listener: the callable that was passed to addListener
        """
        ...
    
    def __lt__(self, other):
        ...
    
    def __le__(self, other):
        ...
    
    def __eq__(self, other):
        ...
    
    def __ne__(self, other):
        ...
    
    def __gt__(self, other):
        ...
    
    def __ge__(self, other):
        ...
    
    def __bool__(self):
        ...
    
    def __repr__(self):
        ...
    


