"""
This type stub file was generated by pyright.
"""

import logging
from ntcore.constants import NT_NOTIFY_IMMEDIATE, NT_NOTIFY_NEW
from typing import Any, Optional

__all__ = ["NetworkTable"]
_is_new = NT_NOTIFY_IMMEDIATE | NT_NOTIFY_NEW
logger = logging.getLogger("nt")
class NetworkTable:
    """
        This is a NetworkTable object, it allows you to interact with
        NetworkTables in a table-based manner. You should not directly
        create a NetworkTable object, but instead use
        :meth:`.NetworkTables.getTable` to retrieve a NetworkTable instance.
        
        For example, to interact with the SmartDashboard::

            from networktables import NetworkTables
            sd = NetworkTables.getTable('SmartDashboard')
            
            someNumberEntry = sd.getEntry('someNumber')
            someNumberEntry.putNumber(1234)
            ...
            
        .. seealso::
           - The examples in the documentation.
           - :class:`.NetworkTablesInstance`
    """
    PATH_SEPARATOR = ...
    def __init__(self, path, api, inst):
        self.path = ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    
    def getEntry(self, key):
        """Gets the entry for a subkey. This is the preferred API to use
        to access NetworkTable keys.
        
        :rtype: :class:`.NetworkTableEntry`
        
        .. versionadded:: 2018.0.0
        """
        ...
    
    def addEntryListener(self, listener, immediateNotify: bool = ..., key: Optional[Any] = ..., localNotify: bool = ...):
        """Adds a listener that will be notified when any key in this
        NetworkTable is changed, or when a specified key changes.
        
        The listener is called from the NetworkTables I/O thread, and should
        return as quickly as possible.
        
        :param listener: A callable with signature `callable(source, key, value, isNew)`
        :param immediateNotify: If True, the listener will be called immediately with the current values of the table
        :type immediateNotify: bool
        :param key: If specified, the listener will only be called when this key is changed
        :type key: str
        :param localNotify: True if you wish to be notified of changes made locally (default is False)
        :type localNotify: bool
        
        .. warning:: You may call the NetworkTables API from within the
                     listener, but it is not recommended
                     
        .. versionchanged:: 2017.0.0
           Added localNotify parameter (defaults to False, which is different from NT2)
        
        """
        ...
    
    def addEntryListenerEx(self, listener, flags, key: Optional[Any] = ..., paramIsNew: bool = ...):
        """Adds a listener that will be notified when any key in this
        NetworkTable is changed, or when a specified key changes.
        
        The listener is called from the NetworkTables I/O thread, and should
        return as quickly as possible.
        
        :param listener: A callable with signature `callable(source, key, value, param)`
        :param flags: Bitmask of flags that indicate the types of notifications you wish to receive
        :type flags: :class:`.NotifyFlags`
        :param key: If specified, the listener will only be called when this key is changed
        :type key: str
        :param paramIsNew: If True, the listener fourth parameter is a boolean set to True
                           if the listener is being called because of a new value in the
                           table. Otherwise, the parameter is an integer of the raw
                           `NT_NOTIFY_*` flags
        :type paramIsNew: bool
        
        .. warning:: You may call the NetworkTables API from within the
                     listener, but it is not recommended
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    addTableListener = ...
    addTableListenerEx = ...
    def addSubTableListener(self, listener, localNotify: bool = ...):
        """Adds a listener that will be notified when any key in a subtable of
        this NetworkTable is changed.
        
        The listener is called from the NetworkTables I/O thread, and should
        return as quickly as possible.
        
        :param listener: Callable to call when previously unseen table appears.
                         Function signature is `callable(source, key, subtable, True)`
        :param localNotify: True if you wish to be notified when local changes
                            result in a new table
        :type localNotify: bool
        
        .. warning:: You may call the NetworkTables API from within the
                     listener, but it is not recommended as we are not
                     currently sure if deadlocks will occur
                     
        .. versionchanged:: 2017.0.0
           Added localNotify parameter
        """
        ...
    
    def removeEntryListener(self, listener):
        """Removes a table listener
        
        :param listener: callable that was passed to :meth:`.addTableListener`
                         or :meth:`.addSubTableListener`
        """
        ...
    
    removeTableListener = ...
    def getSubTable(self, key):
        """Returns the table at the specified key. If there is no table at the
        specified key, it will create a new table

        :param key: the key name
        :type key: str
        
        :returns: the networktable to be returned
        :rtype: :class:`.NetworkTable`
        """
        ...
    
    def containsKey(self, key):
        """Determines whether the given key is in this table.
        
        :param key: the key to search for
        :type key: str
        
        :returns: True if the table as a value assigned to the given key
        :rtype: bool
        """
        ...
    
    def __contains__(self, key):
        ...
    
    def containsSubTable(self, key):
        """Determines whether there exists a non-empty subtable for this key
        in this table.
        
        :param key: the key to search for (must not end with path separator)
        :type key: str
        
        :returns: True if there is a subtable with the key which contains at least
                  one key/subtable of its own
        :rtype: bool
        """
        ...
    
    def getKeys(self, types=...):
        """
        :param types: bitmask of types; 0 is treated as a "don't care".
        :type types: :class:`.EntryTypes`
        
        :returns: keys currently in the table
        :rtype: list
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getSubTables(self):
        """:returns: subtables currently in the table
        :rtype: list
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def setPersistent(self, key):
        """Makes a key's value persistent through program restarts.
        
        :param key: the key to make persistent
        :type key: str
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def clearPersistent(self, key):
        """Stop making a key's value persistent through program restarts.
        
        :param key: the key name
        :type key: str
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def isPersistent(self, key):
        """Returns whether the value is persistent through program restarts.
        
        :param key: the key name
        :type key: str
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def delete(self, key):
        """Deletes the specified key in this table.
        
        :param key: the key name
        :type key: str
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def setFlags(self, key, flags):
        """Sets entry flags on the specified key in this table.
        
        :param key: the key name
        :type key: str
        :param flags: the flags to set (bitmask)
        :type flags: :class:`.EntryFlags`
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def clearFlags(self, key, flags):
        """Clears entry flags on the specified key in this table.
        
        :param key: the key name
        :type key: str
        :param flags: the flags to clear (bitmask)
        :type flags: :class:`.EntryFlags`
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getFlags(self, key):
        """Returns the entry flags for the specified key.
        
        :param key: the key name
        :type key: str
        :returns: the flags, or 0 if the key is not defined
        :rtype: :class:`.EntryFlags`
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def putNumber(self, key, value):
        """Put a number in the table
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: int, float
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        """
        ...
    
    def setDefaultNumber(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: int, float
        
        :returns: False if the table key exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getNumber(self, key, defaultValue):
        """Gets the number associated with the given name.
        
        :param key: the key to look up
        :type key: str
        :param defaultValue: the value to be returned if no value is found
        :type defaultValue: int, float
        
        :returns: the value associated with the given key or the given default value
                  if there is no value associated with the key
        :rtype: int, float
        """
        ...
    
    def putString(self, key, value):
        """Put a string in the table
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: str
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        """
        ...
    
    def setDefaultString(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: str
        
        :returns: False if the table key exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getString(self, key, defaultValue):
        """Gets the string associated with the given name. If the key does not
        exist or is of different type, it will return the default value.
        
        :param key: the key to look up
        :type key: str
        :param defaultValue: the value to be returned if no value is found
        :type defaultValue: str
        
        :returns: the value associated with the given key or the given default value
                  if there is no value associated with the key
        :rtype: str
        """
        ...
    
    def putBoolean(self, key, value):
        """Put a boolean in the table
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: bool
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        """
        ...
    
    def setDefaultBoolean(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: bool
        
        :returns: False if the table key exists with a different type
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getBoolean(self, key, defaultValue):
        """Gets the boolean associated with the given name. If the key does not
        exist or is of different type, it will return the default value.

        :param key: the key name
        :type key: str
        :param defaultValue: the default value if the key is None.  If not
                             specified, raises KeyError if the key is None.
        :type defaultValue: bool
        
        :returns: the key
        :rtype: bool
        """
        ...
    
    def putBooleanArray(self, key, value):
        """Put a boolean array in the table
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: iterable(bool)
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def setDefaultBooleanArray(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: iterable(bool)
        
        :returns: False if the table key exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getBooleanArray(self, key, defaultValue):
        """Returns the boolean array the key maps to. If the key does not exist or is
        of different type, it will return the default value.
        
        :param key: the key to look up
        :type key: str
        :param defaultValue: the value to be returned if no value is found
        
        :returns: the value associated with the given key or the given default value
                  if there is no value associated with the key
        :rtype: tuple(bool)
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def putNumberArray(self, key, value):
        """Put a number array in the table
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: iterable(float)
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def setDefaultNumberArray(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: iterable(int or float)
        
        :returns: False if the table key exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getNumberArray(self, key, defaultValue):
        """Returns the number array the key maps to. If the key does not exist or is
        of different type, it will return the default value.
        
        :param key: the key to look up
        :type key: str
        :param defaultValue: the value to be returned if no value is found
        
        :returns: the value associated with the given key or the given default value
                  if there is no value associated with the key
        :rtype: tuple(int or float)
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def putStringArray(self, key, value):
        """Put a string array in the table
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: iterable(str)
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def setDefaultStringArray(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: iterable(str)
        
        :returns: False if the table key exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getStringArray(self, key, defaultValue):
        """Returns the string array the key maps to. If the key does not exist or is
        of different type, it will return the default value.
        
        :param key: the key to look up
        :type key: str
        :param defaultValue: the value to be returned if no value is found
        
        :returns: the value associated with the given key or the given default value
                  if there is no value associated with the key
        :rtype: tuple(str)
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def putRaw(self, key, value):
        """Put a raw value (byte array) in the table
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: bytes
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def setDefaultRaw(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: bytes
        
        :returns: False if the table key exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getRaw(self, key, defaultValue):
        """Returns the raw value (byte array) the key maps to. If the key does not
        exist or is of different type, it will return the default value.
        
        :param key: the key to look up
        :type key: str
        :param defaultValue: the value to be returned if no value is found
        :type defaultValue: bytes
        
        :returns: the value associated with the given key or the given default value
                  if there is no value associated with the key
        :rtype: bytes
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def putValue(self, key, value):
        """Put a value in the table, trying to autodetect the NT type of
        the value. Refer to this table to determine the type mapping:
        
        ======= ============================ =================================
        PyType  NT Type                       Notes
        ======= ============================ =================================
        bool    :attr:`.EntryTypes.BOOLEAN`
        int     :attr:`.EntryTypes.DOUBLE`
        float   :attr:`.EntryTypes.DOUBLE`
        str     :attr:`.EntryTypes.STRING`
        bytes   :attr:`.EntryTypes.RAW`      Doesn't work in Python 2.7
        list    Error                        Use `putXXXArray` methods instead
        tuple   Error                        Use `putXXXArray` methods instead
        ======= ============================ =================================
        
        :param key: the key to be assigned to
        :type key: str
        :param value: the value that will be assigned
        :type value: bool, int, float, str, bytes
        
        :returns: False if the table key already exists with a different type
        :rtype: bool
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def setDefaultValue(self, key, defaultValue):
        """If the key doesn't currently exist, then the specified value will
        be assigned to the key.
        
        :param key: the key to be assigned to
        :type key: str
        :param defaultValue: the default value to set if key doesn't exist.
        :type defaultValue: bool, int, float, str, bytes
        
        :returns: False if the table key exists with a different type
        
        .. versionadded:: 2017.0.0
        
        .. seealso:: :meth:`.putValue`
        """
        ...
    
    def getValue(self, key, defaultValue):
        """Gets the value associated with a key. This supports all
        NetworkTables types (unlike :meth:`putValue`).
        
        :param key: the key of the value to look up
        :type key: str
        :param defaultValue: The default value to return if the key doesn't exist
        :type defaultValue: any
        
        :returns: the value associated with the given key
        :rtype: bool, int, float, str, bytes, tuple
        
        .. versionadded:: 2017.0.0
        """
        ...
    
    def getAutoUpdateValue(self, key, defaultValue, writeDefault: bool = ...):
        """Returns an object that will be automatically updated when the
        value is updated by networktables.
        
        :param key: the key name
        :type  key: str
        :param defaultValue: Default value to use if not in the table
        :type  defaultValue: any
        :param writeDefault: If True, put the default value to the table,
                             overwriting existing values
        :type  writeDefault: bool
        
        :rtype: :class:`.NetworkTableEntry`
        
        .. note:: If you modify the returned value, the value will NOT
                  be written back to NetworkTables (though now there are functions
                  you can use to write values). See :func:`.ntproperty` if
                  you're looking for that sort of thing.
        
        .. seealso:: :func:`.ntproperty` is a better alternative to use
        
        .. versionadded:: 2015.1.3
        
        .. versionchanged:: 2018.0.0
           This now returns the same as :meth:`.NetworkTable.getEntry`
        
        """
        ...
    


