"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

__all__ = ["ntproperty", "ChooserControl"]
class _NtProperty:
    def __init__(self, key, defaultValue, writeDefault, persistent):
        self.key = ...
        self.defaultValue = ...
        self.writeDefault = ...
        self.persistent = ...
    
    def reset(self):
        self.ntvalue = ...
        self.mkv = ...
    
    def get(self, _):
        ...
    
    def set(self, _, value):
        ...
    


def ntproperty(key, defaultValue, writeDefault: bool = ..., doc: Optional[Any] = ..., persistent: bool = ...):
    """
        A property that you can add to your classes to access NetworkTables
        variables like a normal variable.
        
        :param key: A full NetworkTables key (eg ``/SmartDashboard/foo``)
        :type  key: str
        :param defaultValue: Default value to use if not in the table
        :type  defaultValue: any
        :param writeDefault: If True, put the default value to the table,
                             overwriting existing values
        :type  writeDefault: bool
        :param doc: If given, will be the docstring of the property.
        :type  doc: str
        :param persistent: If True, persist set values across restarts.
                           *writeDefault* is ignored if this is True.
        :type  persistent: bool
        
        Example usage::
        
            class Foo(object):
            
                something = ntproperty('/SmartDashboard/something', True)
                
                ...
                
                def do_thing(self):
                    if self.something:    # reads from value
                        ...
                        
                        self.something = False # writes value
        
        .. note:: Does not work with empty lists/tuples.
        
                  Getting the value of this property should be reasonably
                  fast, but setting the value will have just as much overhead
                  as :meth:`.NetworkTable.putValue`
                  
        .. warning:: When using python 2.x, the property must be assigned to
                     a new-style class or it won't work!
                     
                     Additionally, this function assumes that the value's type
                     never changes. If it does, you'll get really strange
                     errors... so don't do that.
                  
        .. versionadded:: 2015.3.0

        .. versionchanged:: 2017.0.6
            The *doc* parameter.

        .. versionchanged:: 2018.0.0
            The *persistent* parameter.
    """
    ...

class ChooserControl(object):
    """
        Interacts with a :class:`wpilib.sendablechooser.SendableChooser`
        object over NetworkTables.
    """
    def __init__(self, key, on_choices: Optional[Any] = ..., on_selected: Optional[Any] = ...):
        """
            :param key: NetworkTables key
            :type  key: str
            :param on_choices: A function that will be called when the
                               choices change. Signature: fn(value)
            :param on_selection: A function that will be called when the
                                 selection changes. Signature: fn(value)
        """
        self.subtable = ...
        self.on_choices = ...
        self.on_selected = ...
    
    def close(self):
        """Stops listening for changes to the ``SendableChooser``"""
        ...
    
    def getChoices(self):
        """
            Returns the current choices. If the chooser doesn't exist, this
            will return an empty tuple.
        
            :rtype: tuple
        """
        ...
    
    def getSelected(self):
        """
            Returns the current selection or None
        
            :rtype: str
        """
        ...
    
    def setSelected(self, selection):
        """
            Sets the active selection on the chooser
            
            :param selection: Active selection name
        """
        ...
    
    def _on_change(self, table, key, value, isNew):
        ...
    


