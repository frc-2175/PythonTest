"""
This type stub file was generated by pyright.
"""

import logging
from collections import namedtuple
from typing import Any, Optional

logger = logging.getLogger("nt")
_ListenerData = namedtuple("ListenerData", ["callback", "poller_uid"])
class Poller(object):
    def __init__(self):
        self.poll_queue = ...
        self.poll_cond = ...
        self.terminating = ...
        self.cancelling = ...
    
    def terminate(self):
        ...
    


class CallbackThread(object):
    def __init__(self, name):
        self.m_listeners = ...
        self.m_queue = ...
        self.m_pollers = ...
        self.m_active = ...
        self.name = ...
    
    def matches(self, listener, data):
        ...
    
    def setListener(self, data, listener_uid):
        ...
    
    def doCallback(self, callback, data):
        ...
    
    def start(self):
        self.m_active = ...
    
    def stop(self):
        self.m_active = ...
    
    def sendPoller(self, poller_uid, *args):
        ...
    
    def main(self):
        ...
    


class CallbackManager(object):
    def __init__(self, verbose):
        self.m_verbose = ...
        self.m_owner = ...
    
    def setVerboseLogging(self, verbose):
        self.m_verbose = ...
    
    def stop(self):
        ...
    
    def remove(self, listener_uid):
        ...
    
    def createPoller(self):
        ...
    
    def removePoller(self, poller_uid):
        ...
    
    def waitForQueue(self, timeout):
        ...
    
    def poll(self, poller_uid, timeout: Optional[Any] = ...):
        ...
    
    def cancelPoll(self, poller_uid):
        ...
    
    def start(self, *args):
        ...
    
    def doAdd(self, item):
        ...
    
    def send(self, only_listener, item):
        ...
    


