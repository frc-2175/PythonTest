"""
This type stub file was generated by pyright.
"""

import logging
from .support.lists import Pair

logger = logging.getLogger("nt")
_empty_pair = Pair(0, 0)
_state_map = { 0: "created",1: "init",2: "handshake",3: "synchronized",4: "active",5: "dead" }
class NetworkConnection(object):
    class State(object):
        kCreated = ...
        kInit = ...
        kHandshake = ...
        kSynchronized = ...
        kActive = ...
        kDead = ...
    
    
    def __init__(self, uid, stream, notifier, handshake, get_entry_type, verbose: bool = ...):
        self.m_verbose = ...
        self.m_uid = ...
        self.m_stream = ...
        self.m_notifier = ...
        self.m_handshake = ...
        self.m_get_entry_type = ...
        self.m_active = ...
        self.m_proto_rev = ...
        self.state = ...
        self.m_state_mutex = ...
        self.m_last_update = ...
        self.m_outgoing = ...
        self.m_process_incoming = ...
        self.m_read_thread = ...
        self.m_write_thread = ...
        self.m_remote_id_mutex = ...
        self.m_remote_id = ...
        self.m_last_post = ...
        self.m_pending_mutex = ...
        self.m_pending_outgoing = ...
        self.m_pending_update = ...
        self.m_shutdown_mutex = ...
        self.m_read_shutdown = ...
        self.m_write_shutdown = ...
    
    def start(self):
        self.m_active = ...
        self.m_write_thread = ...
        self.m_read_thread = ...
    
    def __repr__(self):
        ...
    
    def stop(self):
        self.m_active = ...
    
    def get_proto_rev(self):
        ...
    
    def get_stream(self):
        ...
    
    def info(self):
        ...
    
    def is_connected(self):
        ...
    
    def last_update(self):
        ...
    
    def set_process_incoming(self, func):
        self.m_process_incoming = ...
    
    def set_proto_rev(self, proto_rev):
        self.m_proto_rev = ...
    
    def set_state(self, state):
        ...
    
    def remote_id(self):
        ...
    
    def set_remote_id(self, remote_id):
        ...
    
    def uid(self):
        ...
    
    def _sendMessages(self, msgs):
        ...
    
    def _readThreadMain(self):
        ...
    
    def _writeThreadMain(self):
        self.m_active = ...
    
    def queueOutgoing(self, msg):
        ...
    
    def postOutgoing(self, keep_alive):
        ...
    


