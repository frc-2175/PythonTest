"""
This type stub file was generated by pyright.
"""

import logging
from typing import Any, Optional

logger = logging.getLogger("nt")
class _Entry(object):
    __slots__ = ...
    def __init__(self, name, local_id, user_entry):
        self.name = ...
        self.value = ...
        self.flags = ...
        self.id = ...
        self.local_id = ...
        self.seq_num = ...
        self.local_write = ...
        self.rpc_uid = ...
        self.rpc_call_uid = ...
        self.user_entry = ...
        self.isPersistent = ...
    
    def increment_seqnum(self):
        ...
    
    def isSeqNewerThan(self, other):
        """
            self > other
        """
        ...
    
    def isSeqNewerOrEqual(self, other):
        """
            self >= other
        """
        ...
    
    def isRpc(self):
        ...
    
    def __repr__(self):
        ...
    


class Storage(object):
    def __init__(self, entry_notifier, rpc_server, user_entry_creator):
        self.m_notifier = ...
        self.m_rpc_server = ...
        self.m_user_entry_creator = ...
        self.m_mutex = ...
        self.m_entries = ...
        self.m_idmap = ...
        self.m_localmap = ...
        self.m_rpc_results = ...
        self.m_rpc_blocking_calls = ...
        self.m_persistent_dirty = ...
        self.m_terminating = ...
        self.m_rpc_results_cond = ...
        self.m_dispatcher = ...
        self.m_server = ...
        self.m_dispatcher_queue_outgoing = ...
    
    def stop(self):
        self.m_terminating = ...
    
    def setDispatcher(self, dispatcher, server):
        ...
    
    def clearDispatcher(self):
        self.m_dispatcher = ...
        self.m_dispatcher_queue_outgoing = ...
    
    def getMessageEntryType(self, msg_id):
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        ...
    
    def processIncoming(self, msg, conn):
        ...
    
    def _processIncomingEntryAssign(self, msg, conn, outgoing):
        ...
    
    def _processIncomingEntryUpdate(self, msg, conn, outgoing):
        ...
    
    def _processIncomingFlagsUpdate(self, msg, conn, outgoing):
        ...
    
    def _processIncomingEntryDelete(self, msg, conn, outgoing):
        ...
    
    def _processIncomingClearEntries(self, msg, conn, outgoing):
        ...
    
    def _processIncomingExecuteRpc(self, msg, conn, outgoing):
        ...
    
    def _processIncomingRpcResponse(self, msg, conn, outgoing):
        ...
    
    def getInitialAssignments(self, conn, msgs):
        ...
    
    def applyInitialAssignments(self, conn, msgs, new_server, out_msgs):
        ...
    
    def getEntryValue(self, name):
        ...
    
    def setDefaultEntryValue(self, name, value):
        ...
    
    def setDefaultEntryValueById(self, local_id, value):
        ...
    
    def setEntryValue(self, name, value):
        ...
    
    def setEntryValueById(self, local_id, value):
        ...
    
    def _setEntryValueImpl(self, entry, value, outgoing, local):
        ...
    
    def setEntryTypeValue(self, name, value):
        ...
    
    def setEntryTypeValueById(self, local_id, value):
        ...
    
    def setEntryFlags(self, name, flags):
        ...
    
    def setEntryFlagsById(self, local_id, flags):
        ...
    
    def _setEntryFlagsImpl(self, entry, flags, outgoing, local):
        ...
    
    def getEntryFlags(self, name):
        ...
    
    def getEntryFlagsById(self, local_id):
        ...
    
    def deleteEntry(self, name):
        ...
    
    def deleteEntryById(self, local_id):
        ...
    
    def _deleteEntryImpl(self, entry, outgoing, local):
        ...
    
    def _defaultShouldDelete(self, entry):
        ...
    
    def _deleteAllEntriesImpl(self, local, should_delete: Optional[Any] = ...):
        ...
    
    def deleteAllEntries(self):
        ...
    
    def _getOrNew(self, name):
        ...
    
    def getEntryId(self, name):
        ...
    
    def getEntry(self, name):
        ...
    
    def getEntries(self, prefix, types):
        ...
    
    def getEntryInfoById(self, local_id):
        ...
    
    def getEntryNameById(self, local_id):
        ...
    
    def getEntryTypeById(self, local_id):
        ...
    
    def getEntryInfo(self, prefix, types):
        ...
    
    def addListener(self, prefix, callback, flags):
        ...
    
    def addListenerById(self, local_id, callback, flags):
        ...
    
    def addPolledListener(self, poller_uid, prefix, flags):
        ...
    
    def addPolledListenerById(self, poller_uid, local_id, flags):
        ...
    
    def _getPersistentEntries(self, periodic):
        ...
    
    def getEntryValues(self, prefix):
        ...
    
    def createRpc(self, local_id, defn, rpc_uid):
        ...
    
    def callRpc(self, local_id, params):
        ...
    
    def _process_rpc(self, local_id, call_uid, result):
        ...
    
    def getRpcResult(self, local_id, call_uid, timeout: Optional[Any] = ...):
        ...
    
    def cancelBlockingRpcResult(self, call_uid):
        ...
    
    def loadPersistent(self, filename: Optional[Any] = ..., fp: Optional[Any] = ...):
        ...
    
    def loadEntries(self, filename: Optional[Any] = ..., fp: Optional[Any] = ..., prefix=...):
        ...
    
    def _loadFromFile(self, persistent, prefix, filename, fp):
        ...
    
    def _loadEntries(self, entries, persistent):
        ...
    
    def savePersistent(self, filename: Optional[Any] = ..., periodic: bool = ..., fp: Optional[Any] = ...):
        ...
    
    def saveEntries(self, prefix, filename: Optional[Any] = ..., fp: Optional[Any] = ...):
        ...
    
    def _saveEntries(self, entries, filename, fp):
        ...
    


