"""
This type stub file was generated by pyright.
"""

def match_arglist(name, args, kwargs, templates, allow_extra_kwargs: bool = ...):
    """
    This compares args and kwargs against the argument templates in templates.
    
    :param name: Name of the function being checked
    :param args: The list of positional arguments
    :param kwargs: The list of keyword arguments
    :param templates: A list of dictionaries corresponding to possible
    argument list formats.
    :param allow_extra_kwargs: Whether or not to allow extra keyword arguments. If this
        is true, then extra keyword arguments will be added to the result dictionary.

    An argument template is structured as follows:

    Each element in the list should be a tuple, corresponding to an argument name,
    and argument type condition. See types_match() for argument type condition structures.

    :returns The id of the selected template
    :returns A dictionary of argument name, value tuples.
    :
    """
    ...

def _print(*args, **kwargs):
    ...

def __match_arglist(name, args, kwargs, templates, err, allow_extra_kwargs: bool = ...):
    ...

def types_match(object, type_structure):
    """
    :param object: the object to check
    :param type_structure: The structure, composed of lists, strings, and types,
    representing conditions that object must meet.

    Here are the possibilities for type_structure:
    - HasAttribute
    - type_condition
    - list of type_structures
    - None

    If type_structure is an HasAttribute, this will return False if
    any contained attribute is not present in object

    If type_structure is a type_condition, then object must be of the same type

    If type_structure is a list of type_structures, it is handled by running
    types_match on each item, and returning true if at least one matches.

    If type_structure is None, than everything matches it, and true is returned.
    """
    ...

def typematch_to_str(type_structure):
    """Only used for debugging"""
    ...

class HasAttribute:
    def __init__(self, *args):
        self.conditions = ...
    
    def matches(self, object):
        ...
    


def reset_wpilib():
    """
        Clears all devices from WPILib, and resets the hal data
    
        .. warning:: This is only intended to be used by test frameworks and
                     other debugging tools with the simulated HAL!
    """
    ...

