"""
This type stub file was generated by pyright.
"""

import enum
from typing import Optional, Tuple
from .i2c import I2C
from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["ADXL345_I2C"]
class ADXL345_I2C(SendableBase):
    """
        ADXL345 accelerometer device via i2c
    """
    kAddress = ...
    kPowerCtlRegister = ...
    kDataFormatRegister = ...
    kDataRegister = ...
    kGsPerLSB = ...
    kPowerCtl_Link = ...
    kPowerCtl_AutoSleep = ...
    kPowerCtl_Measure = ...
    kPowerCtl_Sleep = ...
    kDataFormat_SelfTest = ...
    kDataFormat_SPI = ...
    kDataFormat_IntInvert = ...
    kDataFormat_FullRes = ...
    kDataFormat_Justify = ...
    Range = ...
    class Axes(enum.IntEnum):
        kX = ...
        kY = ...
        kZ = ...
    
    
    def __init__(self, port: I2C.Port, range: Range, address: Optional[int] = ...) -> None:
        """Constructor.

        :param port: The I2C port the accelerometer is attached to.
        :param range: The range (+ or -) that the accelerometer will measure.
        :param address: the I2C address of the accelerometer (0x1D or 0x53)
        """
        self.i2c = ...
    
    def close(self) -> None:
        ...
    
    def setRange(self, range: Range) -> None:
        """Set the measuring range of the accelerometer.

        :param range: The maximum acceleration, positive or negative, that
                      the accelerometer will measure.
        """
        ...
    
    def getX(self) -> float:
        """Get the x axis acceleration

        :returns: The acceleration along the x axis in g-forces
        """
        ...
    
    def getY(self) -> float:
        """Get the y axis acceleration

        :returns: The acceleration along the y axis in g-forces
        """
        ...
    
    def getZ(self) -> float:
        """Get the z axis acceleration

        :returns: The acceleration along the z axis in g-forces
        """
        ...
    
    def getAcceleration(self, axis: Axes) -> float:
        """Get the acceleration of one axis in Gs.

        :param axis: The axis to read from.
        :returns: An object containing the acceleration measured on each axis of the ADXL345 in Gs.
        """
        ...
    
    def getAccelerations(self) -> Tuple[float, float, float]:
        """Get the acceleration of all axes in Gs.

        :returns: X,Y,Z tuple of acceleration measured on all axes of the
                  ADXL345 in Gs.
        """
        ...
    
    def _updateValues(self) -> None:
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


