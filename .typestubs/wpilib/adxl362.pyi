"""
This type stub file was generated by pyright.
"""

import enum
from typing import Optional, Tuple
from .spi import SPI
from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["ADXL362"]
class ADXL362(SendableBase):
    """
        ADXL362 SPI Accelerometer.
    
        This class allows access to an Analog Devices ADXL362 3-axis accelerometer.
        
        .. not_implemented: init
    """
    kRegWrite = ...
    kRegRead = ...
    kPartIdRegister = ...
    kDataRegister = ...
    kFilterCtlRegister = ...
    kPowerCtlRegister = ...
    kFilterCtl_Range2G = ...
    kFilterCtl_Range4G = ...
    kFilterCtl_Range8G = ...
    kFilterCtl_ODR_100Hz = ...
    kPowerCtl_UltraLowNoise = ...
    kPowerCtl_AutoSleep = ...
    kPowerCtl_Measure = ...
    Range = ...
    class Axes(enum.IntEnum):
        kX = ...
        kY = ...
        kZ = ...
    
    
    def __init__(self, range: Range, port: Optional[SPI.Port] = ...) -> None:
        """Constructor.
        
        :param range: The range (+ or -) that the accelerometer will measure.
        :param port: The SPI port that the accelerometer is connected to
        """
        self.spi = ...
    
    def close(self) -> None:
        ...
    
    def setRange(self, range: Range) -> None:
        """Set the measuring range of the accelerometer.

        :param range: The maximum acceleration, positive or negative, that
                      the accelerometer will measure.
        """
        ...
    
    def getX(self) -> float:
        """Get the x axis acceleration

        :returns: The acceleration along the x axis in g-forces
        """
        ...
    
    def getY(self) -> float:
        """Get the y axis acceleration

        :returns: The acceleration along the y axis in g-forces
        """
        ...
    
    def getZ(self) -> float:
        """Get the z axis acceleration

        :returns: The acceleration along the z axis in g-forces
        """
        ...
    
    def getAcceleration(self, axis: Axes) -> float:
        """Get the acceleration of one axis in Gs.

        :param axis: The axis to read from.
        :returns: An object containing the acceleration measured on each axis in Gs.
        """
        ...
    
    def getAccelerations(self) -> Tuple[float, float, float]:
        """Get the acceleration of all axes in Gs.

        :returns: X,Y,Z tuple of acceleration measured on all axes in Gs.
        """
        ...
    
    def _updateValues(self) -> None:
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


