"""
This type stub file was generated by pyright.
"""

from typing import Optional
from .gyrobase import GyroBase
from .spi import SPI

"""
This type stub file was generated by pyright.
"""
__all__ = ["ADXRS450_Gyro"]
class ADXRS450_Gyro(GyroBase):
    """
    Use a rate gyro to return the robots heading relative to a starting position.
    The Gyro class tracks the robots heading based on the starting position. As
    the robot rotates the new heading is computed by integrating the rate of
    rotation returned by the sensor. When the class is instantiated, it does a
    short calibration routine where it samples the gyro while at rest to
    determine the default offset. This is subtracted from each sample to
    determine the heading.

    This class is for the digital ADXRS450 gyro sensor that connects via SPI.
    """
    kSamplePeriod = ...
    kCalibrationSampleTime = ...
    kDegreePerSecondPerLSB = ...
    kRateRegister = ...
    kTemRegister = ...
    kLoCSTRegister = ...
    kHiCSTRegister = ...
    kQuadRegister = ...
    kFaultRegister = ...
    kPIDRegister = ...
    kSNHighRegister = ...
    kSNLowRegister = ...
    def __init__(self, port: Optional[SPI.Port] = ...) -> None:
        """
            Constructor.

            :param port: The SPI port that the gyro is connected to
        """
        self.spi = ...
    
    def isConnected(self) -> bool:
        ...
    
    def calibrate(self) -> None:
        """Calibrate the gyro by running for a number of samples and computing the
        center value. Then use the center value as the Accumulator center value for
        subsequent measurements.

        It's important to make sure that the robot is not moving while the centering
        calculations are in progress, this is typically done when the robot is first
        turned on while it's sitting at rest before the competition starts.

        .. note:: Usually you don't need to call this, as it's called when the
                  object is first created. If you do, it will freeze your robot
                  for 5 seconds
        """
        ...
    
    def _calcParity(self, v: int) -> bool:
        ...
    
    def _readRegister(self, reg: int) -> int:
        ...
    
    def reset(self) -> None:
        """
        Reset the gyro.
        
        Resets the gyro to a heading of zero. This can be used if
        there is significant drift in the gyro and it needs to be recalibrated
        after it has been running.
        """
        ...
    
    def close(self) -> None:
        """Delete (free) the spi port used for the gyro and stop accumulating."""
        ...
    
    def getAngle(self) -> float:
        """
        Return the actual angle in degrees that the robot is currently facing.

        The angle is based on the current accumulator value corrected by the
        oversampling rate, the gyro type and the A/D calibration values. The angle
        is continuous, that is it will continue from 360 to 361 degrees. This
        allows algorithms that wouldn't want to see a discontinuity in the gyro
        output as it sweeps past from 360 to 0 on the second time around.

        :returns: the current heading of the robot in degrees. This heading is based
                  on integration of the returned rate from the gyro.
        """
        ...
    
    def getRate(self) -> float:
        """Return the rate of rotation of the gyro

        The rate is based on the most recent reading of the gyro value

        :returns: the current rate in degrees per second
        """
        ...
    


