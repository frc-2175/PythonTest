"""
This type stub file was generated by pyright.
"""

from typing import Union
from .analoginput import AnalogInput
from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["AnalogAccelerometer"]
class AnalogAccelerometer(SendableBase):
    """Analog Accelerometer
    
    The accelerometer reads acceleration directly through the sensor. Many
    sensors have multiple axis and can be treated as multiple devices. Each
    is calibrated by finding the center value over a period of time.
    
    .. not_implemented: initAccelerometer
    """
    PIDSourceType = ...
    def __init__(self, channel: Union[AnalogInput, int]) -> None:
        """Constructor. Create a new instance of Accelerometer from either an existing
        AnalogChannel or from an analog channel port index.

        :param channel: port index or an already initialized AnalogInput
        """
        self.voltsPerG = ...
        self.zeroGVoltage = ...
        self.pidSource = ...
    
    def close(self) -> None:
        self.analogChannel = ...
    
    def getAcceleration(self) -> float:
        """Return the acceleration in Gs.

        The acceleration is returned units of Gs.

        :returns: The current acceleration of the sensor in Gs.
        """
        ...
    
    def setSensitivity(self, sensitivity: float) -> None:
        """Set the accelerometer sensitivity.

        This sets the sensitivity of the accelerometer used for calculating
        the acceleration.  The sensitivity varies by accelerometer model.
        There are constants defined for various models.

        :param sensitivity: The sensitivity of accelerometer in Volts per G.
        """
        self.voltsPerG = ...
    
    def setZero(self, zero: float) -> None:
        """Set the voltage that corresponds to 0 G.

        The zero G voltage varies by accelerometer model. There are constants
        defined for various models.

        :param zero: The zero G voltage.
        """
        self.zeroGVoltage = ...
    
    def setPIDSourceType(self, pidSource: PIDSourceType) -> None:
        """Set which parameter you are using as a process
        control variable. 

        :param pidSource: An enum to select the parameter.
        """
        self.pidSource = ...
    
    def getPIDSourceType(self) -> PIDSourceType:
        ...
    
    def pidGet(self) -> float:
        """Get the Acceleration for the PID Source parent.

        :returns: The current acceleration in Gs.
        """
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


