"""
This type stub file was generated by pyright.
"""

from typing import Union
from .analoginput import AnalogInput
from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["AnalogPotentiometer"]
class AnalogPotentiometer(SendableBase):
    """Reads a potentiometer via an :class:`.AnalogInput`
    
    Analog potentiometers read
    in an analog voltage that corresponds to a position. The position is in
    whichever units you choose, by way of the scaling and offset constants
    passed to the constructor.

    .. not_implemented: initPot
    """
    PIDSourceType = ...
    def __init__(self, channel: Union[AnalogInput, int], fullRange: float = ..., offset: float = ...) -> None:
        """AnalogPotentiometer constructor.

        Use the fullRange and offset values so that the output produces
        meaningful values. I.E: you have a 270 degree potentiometer and
        you want the output to be degrees with the halfway point as 0
        degrees. The fullRange value is 270.0(degrees) and the offset is
        -135.0 since the halfway point after scaling is 135 degrees.

        :param channel: The analog channel this potentiometer is plugged into.
        :param fullRange: The scaling to multiply the fraction by to get a
            meaningful unit.  Defaults to 1.0 if unspecified.
        :param offset: The offset to add to the scaled value for controlling
            the zero value.  Defaults to 0.0 if unspecified.
        """
        self.analog_input = ...
        self.fullRange = ...
        self.offset = ...
        self.init_analog_input = ...
        self.pidSource = ...
    
    def get(self) -> float:
        """Get the current reading of the potentiometer.

        :returns: The current position of the potentiometer.
        """
        ...
    
    def setPIDSourceType(self, pidSource: PIDSourceType) -> None:
        """Set which parameter you are using as a process
        control variable. 

        :param pidSource: An enum to select the parameter.
        """
        self.pidSource = ...
    
    def getPIDSourceType(self) -> PIDSourceType:
        ...
    
    def pidGet(self) -> float:
        """Implement the PIDSource interface.

        :returns: The current reading.
        """
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    
    def close(self) -> None:
        ...
    


