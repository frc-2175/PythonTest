"""
This type stub file was generated by pyright.
"""

from typing import Optional
from ..sendablebase import SendableBase
from ..sendablebuilder import SendableBuilder
from . import command
from .. import sendable

"""
This type stub file was generated by pyright.
"""
__all__ = ["Subsystem"]
class Subsystem(SendableBase):
    """This class defines a major component of the robot.

    A good example of a subsystem is the driveline, or a claw if the robot has
    one.

    All motors should be a part of a subsystem. For instance, all the wheel
    motors should be a part of some kind of "Driveline" subsystem.

    Subsystems are used within the command system as requirements for Command.
    Only one command which requires a subsystem can run at a time.  Also,
    subsystems can have default commands which are started if there is no
    command running which requires this subsystem.

    .. seealso:: :class:`.Command`
    """
    def __init__(self, name: Optional[str] = ...) -> None:
        """Creates a subsystem.

        :param name: the name of the subsystem; if None, it will be set to the
                     name to the name of the class.
        """
        self.logger = ...
        self.initializedDefaultCommand = ...
        self.currentCommand = ...
        self.currentCommandChanged = ...
        self.defaultCommand = ...
    
    def initDefaultCommand(self) -> None:
        """Initialize the default command for a subsystem
        By default subsystems have no default command, but if they do, the
        default command is set with this method. It is called on all
        Subsystems by CommandBase in the users program after all the
        Subsystems are created.
        """
        ...
    
    def periodic(self) -> None:
        """When the run method of the scheduler is called this method will be called.
        """
        ...
    
    def setDefaultCommand(self, command: command.Command) -> None:
        """Sets the default command.  If this is not called or is called with
        None, then there will be no default command for the subsystem.

        :param command: the default command (or None if there should be none)
        
        .. warning:: This should NOT be called in a constructor if the subsystem
                     is a singleton.
        """
        ...
    
    def getDefaultCommand(self) -> command.Command:
        """Returns the default command (or None if there is none).
        
        :returns: the default command
        """
        ...
    
    def getDefaultCommandName(self) -> str:
        """
        Returns the default command name, or empty string is there is none.

        :returns: the default command name
        """
        ...
    
    def setCurrentCommand(self, command: Optional[command.Command]) -> None:
        """Sets the current command
        
        :param command: the new current command
        """
        self.currentCommand = ...
        self.currentCommandChanged = ...
    
    def confirmCommand(self) -> None:
        """Call this to alert Subsystem that the current command is actually
        the command.  Sometimes, the Subsystem is told that it has no command
        while the Scheduler is going through the loop, only to be soon after
        given a new one.  This will avoid that situation.
        """
        ...
    
    def getCurrentCommand(self) -> command.Command:
        """Returns the command which currently claims this subsystem.
        
        :returns: the command which currently claims this subsystem
        """
        ...
    
    def getCurrentCommandName(self) -> str:
        """
        Returns the current command name, or empty string if no current command.

        :returns: the current command name
        """
        ...
    
    def addChild(self, child: sendable.Sendable, name: Optional[str] = ...) -> None:
        """
        Associate a :class:`.Sendable` with this Subsystem.
        Update the child's name if provided

        :param child: sendable
        :param name: name to give child
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


