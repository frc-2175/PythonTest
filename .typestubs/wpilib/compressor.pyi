"""
This type stub file was generated by pyright.
"""

from typing import Optional
from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["Compressor"]
class Compressor(SendableBase):
    """Class for operating a compressor connected to a PCM (Pneumatic Control Module).
    
    The PCM will automatically run in closed loop mode by default whenever a
    Solenoid object is created. For most cases the Compressor object does not
    need to be instantiated or used in a robot program. This class is only required 
    in cases where the robot program needs a more detailed status of the compressor or to
    enable/disable closed loop control.

    Note: you cannot operate the compressor directly from this class as doing
    so would circumvent the safety provided by using the pressure switch and closed loop control.
    You can only turn off closed loop control, thereby stopping the compressor from operating.
    """
    def __init__(self, module: Optional[int] = ...) -> None:
        """Makes a new instance of the compressor using the provided CAN device ID.
        
        :param module: The PCM CAN device ID. (0 - 62 inclusive)
        """
        self.table = ...
        self.compressorHandle = ...
        self.module = ...
    
    def start(self) -> None:
        """Start the compressor running in closed loop control mode.

        Use the method in cases where you would like to manually stop and
        start the compressor for applications such as conserving battery
        or making sure that the compressor motor doesn't start during
        critical operations.
        """
        ...
    
    def stop(self) -> None:
        """Stop the compressor from running in closed loop control mode.

        Use the method in cases where you would like to manually stop and
        start the compressor for applications such as conserving battery
        or making sure that the compressor motor doesn't start during
        critical operations.
        """
        ...
    
    def enabled(self) -> bool:
        """Get the enabled status of the compressor.
        
        :returns: True if the compressor is on
        """
        ...
    
    def getPressureSwitchValue(self) -> bool:
        """ Get the pressure switch value.
 
        :returns: True if the pressure is low
        """
        ...
    
    def getCompressorCurrent(self) -> float:
        """Get the current being used by the compressor.
        
        :returns: Current consumed by the compressor in amps
        """
        ...
    
    def setClosedLoopControl(self, on: bool) -> None:
        """Set the PCM in closed loop control mode.
        
        :param on: If True sets the compressor to be in closed loop control
                   mode (default)
        """
        ...
    
    def getClosedLoopControl(self) -> bool:
        """Gets the current operating mode of the PCM.
        
        :returns: True if compressor is operating on closed-loop mode
        """
        ...
    
    def getCompressorCurrentTooHighFault(self) -> bool:
        """
        :returns: True if PCM is in fault state : Compressor Drive is
            disabled due to compressor current being too high
        """
        ...
    
    def getCompressorCurrentTooHighStickyFault(self) -> bool:
        """
        :returns: True if PCM sticky fault is set : Compressor is
            disabled due to compressor current being too high
        """
        ...
    
    def getCompressorShortedFault(self) -> bool:
        """
        :returns: True if PCM is in fault state : Compressor output
            appears to be shorted
        """
        ...
    
    def getCompressorShortedStickyFault(self) -> bool:
        """
        :returns: True if PCM sticky fault is set : Compressor output
            appears to be shorted
        """
        ...
    
    def getCompressorNotConnectedFault(self) -> bool:
        """
        :returns: True if PCM is in fault state : Compressor does not appear
            to be wired, i.e. compressor is not drawing enough current.
        """
        ...
    
    def getCompressorNotConnectedStickyFault(self) -> bool:
        """
        :returns: True if PCM sticky fault is set : Compressor does not appear
            to be wired, i.e. compressor is not drawing enough current.
        """
        ...
    
    def clearAllPCMStickyFaults(self) -> None:
        """Clear ALL sticky faults inside PCM that Compressor is wired to.

        If a sticky fault is set, then it will be persistently cleared. The compressor might 
        momentarily disable while the flags are being cleared. Doo not call this method too
        frequently, otherwise normal compressor functionality may be prevented.

        If no sticky faults are set then this call will have no effect.
        """
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    
    def enabledChanged(self, value) -> None:
        ...
    


