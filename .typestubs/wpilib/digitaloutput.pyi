"""
This type stub file was generated by pyright.
"""

from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["DigitalOutput"]
def _freePWMGenerator(pwmGenerator: int) -> None:
    ...

class DigitalOutput(SendableBase):
    """Writes to a digital output
    
    Other devices that are implemented elsewhere will automatically allocate
    digital inputs and outputs as required.
    """
    invalidPwmGenerator = ...
    def __init__(self, channel: int) -> None:
        """Create an instance of a digital output.

        :param channel: the DIO channel for the digital output. 0-9 are on-board, 10-25 are on the MXP
        """
        self.pwmGenerator = ...
        self.channel = ...
        self.handle = ...
    
    def close(self) -> None:
        """Free the resources associated with a digital output."""
        self.pwmGenerator = ...
        self.handle = ...
    
    def set(self, value: bool) -> None:
        """Set the value of a digital output.

        :param value: True is on, off is False
        """
        ...
    
    def get(self) -> bool:
        """Gets the value being output from the Digital Output.

        :returns: the state of the digital output
        """
        ...
    
    def getChannel(self) -> int:
        """:returns: The GPIO channel number that this object represents.
        """
        ...
    
    def pulse(self, pulseLength: float) -> None:
        """Generate a single pulse. There can only be a single pulse going at any time.

        :param pulseLength: The length of the pulse.
        """
        ...
    
    def isPulsing(self) -> bool:
        """Determine if the pulse is still going. Determine if a previously
        started pulse is still going.

        :returns: True if pulsing
        """
        ...
    
    def setPWMRate(self, rate: float) -> None:
        """Change the PWM frequency of the PWM output on a Digital Output line.

        The valid range is from 0.6 Hz to 19 kHz. The frequency resolution is
        logarithmic.

        There is only one PWM frequency for all channels.

        :param rate: The frequency to output all digital output PWM signals.
        """
        ...
    
    def enablePWM(self, initialDutyCycle: float) -> None:
        """Enable a PWM Output on this line.

        Allocate one of the 6 DO PWM generator resources.

        Supply the initial duty-cycle to output so as to avoid a glitch when
        first starting.

        The resolution of the duty cycle is 8-bit for low frequencies (1kHz or
        less) but is reduced the higher the frequency of the PWM signal is.

        :param initialDutyCycle: The duty-cycle to start generating. [0..1]
        """
        self.pwmGenerator = ...
    
    def disablePWM(self) -> None:
        """Change this line from a PWM output back to a static Digital Output
        line.

        Free up one of the 6 DO PWM generator resources that were in use.
        """
        ...
    
    def updateDutyCycle(self, dutyCycle: float) -> None:
        """Change the duty-cycle that is being generated on the line.

        The resolution of the duty cycle is 8-bit for low frequencies (1kHz or
        less) but is reduced the higher the frequency of the PWM signal is.

        :param dutyCycle: The duty-cycle to change to. [0..1]
        """
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


