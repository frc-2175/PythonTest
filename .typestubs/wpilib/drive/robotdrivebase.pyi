"""
This type stub file was generated by pyright.
"""

import enum
from typing import List
from ..motorsafety import MotorSafety
from ..sendablebase import SendableBase

"""
This type stub file was generated by pyright.
"""
__all__ = ["RobotDriveBase"]
class RobotDriveBase(SendableBase, MotorSafety):
    """Common base class for drive platforms"""
    class MotorType(enum.IntEnum):
        """The location of a motor on the robot for the purpose of driving."""
        kFrontLeft = ...
        kFrontRight = ...
        kRearLeft = ...
        kRearRight = ...
        kLeft = ...
        kRight = ...
        kBack = ...
    
    
    kDefaultDeadband = ...
    kDefaultMaxOutput = ...
    def __init__(self) -> None:
        self.deadband = ...
        self.maxOutput = ...
    
    def setDeadband(self, deadband: float) -> None:
        """Sets the deadband applied to the drive inputs (e.g. joystick values).

        The default value is :const:`kDefaultDeadband`. Inputs smaller than the deadband are set to
        0 while inputs larger than the deadband are scaled from 0 to 1. See :meth:`applyDeadband`.

        :param deadband: The deadband to set
        """
        self.deadband = ...
    
    def setMaxOutput(self, maxOutput: float) -> None:
        """Configure the scaling factor for using drive methods with motor controllers in a mode
        other than PercentVbus or to limit the maximum output.

        The default value is :const:`kDefaultMaxOutput`.

        :param maxOutput: Multiplied with the output percentage computed by the drive functions.
        """
        self.maxOutput = ...
    
    def feedWatchdog(self):
        """
        Feed the motor safety object. Resets the timer that will stop the 
        motors if it completes.

        see :meth:`.MotorSafety.feed`
        """
        ...
    
    @staticmethod
    def limit(value: float) -> float:
        """Limit motor values to the -1.0 to +1.0 range."""
        ...
    
    @staticmethod
    def applyDeadband(value: float, deadband: float) -> float:
        """Returns 0.0 if the given value is within the specified range around zero. The remaining range
        between the deadband and 1.0 is scaled from 0.0 to 1.0.

        :param value: value to clip
        :param deadband: range around zero
        """
        ...
    
    @staticmethod
    def normalize(wheelSpeeds: List[float]) -> None:
        """Normalize all wheel speeds if the magnitude of any wheel is greater
        than 1.0.

        :param wheelSpeeds: Iterable of wheelspeeds to normalize
        """
        ...
    


