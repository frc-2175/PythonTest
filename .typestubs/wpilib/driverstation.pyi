"""
This type stub file was generated by pyright.
"""

import enum
import logging
from typing import Any, Optional, Tuple

"""
This type stub file was generated by pyright.
"""
__all__ = ["DriverStation"]
logger = logging.getLogger("wpilib.ds")
JOYSTICK_UNPLUGGED_MESSAGE_INTERVAL = 1
class MatchInfoData:
    __slots__ = ...
    def __init__(self) -> None:
        self.eventName = ...
        self.matchType = ...
        self.matchNumber = ...
        self.replayNumber = ...
        self.gameSpecificMessage = ...
    


class MatchDataSender:
    def __init__(self) -> None:
        self.table = ...
        self.typeMetadata = ...
        self.gameSpecificMessage = ...
        self.eventName = ...
        self.matchNumber = ...
        self.replayNumber = ...
        self.matchType = ...
        self.alliance = ...
        self.station = ...
        self.controlWord = ...
    


class DriverStation:
    """Provide access to the network communication data to / from the Driver Station."""
    kJoystickPorts = ...
    _station_numbers = ...
    class Alliance(enum.IntEnum):
        """The robot alliance that the robot is a part of."""
        Red = ...
        Blue = ...
        Invalid = ...
    
    
    class MatchType(enum.IntEnum):
        None_ = ...
        Practice = ...
        Qualification = ...
        Elimination = ...
    
    
    @classmethod
    def _reset(cls) -> None:
        ...
    
    @classmethod
    def getInstance(cls) -> DriverStation:
        """Gets the global instance of the DriverStation.

        :returns: :class:`DriverStation`
        """
        ...
    
    def __init__(self) -> None:
        """DriverStation constructor.

        The single DriverStation instance is created statically with the
        instance static member variable, you should never create a
        DriverStation instance.
        """
        self.waitForDataCount = ...
        self.waitForDataCond = ...
        self.cacheDataMutex = ...
        self.joystickAxes = ...
        self.joystickPOVs = ...
        self.joystickButtons = ...
        self.matchInfo = ...
        self.joystickButtonsPressed = ...
        self.joystickButtonsReleased = ...
        self.joystickAxesCache = ...
        self.joystickPOVsCache = ...
        self.joystickButtonsCache = ...
        self.matchInfoCache = ...
        self.controlWordMutex = ...
        self.controlWordCache = ...
        self.lastControlWordUpdate = ...
        self.matchDataSender = ...
        self.nextMessageTime = ...
        self.threadKeepAlive = ...
        self.waitForDataPredicate = ...
        self.userInDisabled = ...
        self.userInAutonomous = ...
        self.userInTeleop = ...
        self.userInTest = ...
        self.thread = ...
    
    def release(self) -> None:
        """Kill the thread."""
        self.threadKeepAlive = ...
    
    @staticmethod
    def reportError(error: str, printTrace: bool) -> None:
        """Report error to Driver Station, and also prints error to `sys.stderr`.
        Optionally appends stack trace to error message.

        :param printTrace: If True, append stack trace to error string
        """
        ...
    
    @staticmethod
    def reportWarning(error: str, printTrace: bool) -> None:
        """Report warning to Driver Station, and also prints error to `sys.stderr`.
        Optionally appends stack trace to error message.

        :param printTrace: If True, append stack trace to warning string
        """
        ...
    
    @staticmethod
    def _reportErrorImpl(isError: bool, code: int, error: str, printTrace: bool, exc_info: Optional[Any] = ...) -> None:
        ...
    
    def getStickButton(self, stick: int, button: int) -> bool:
        """The state of a button on the joystick. Button indexes begin at 1.

        :param stick: The joystick port number
        :param button: The button index, beginning at 1.

        :returns: The state of the button.
        """
        ...
    
    def getStickButtonPressed(self, stick: int, button: int) -> bool:
        """Whether one joystick button was pressed since the last check.
        Button indices begin at 1.

        :param stick: Joystick to read
        :param button: Button index, beginning at 1
        :returns: Whether the joystick button was pressed since the last check
        """
        ...
    
    def getStickButtonReleased(self, stick: int, button: int) -> bool:
        """Whether one joystick button was released since the last check.
        Button indices begin at 1.

        :param stick: Joystick to read
        :param button: Button index, beginning at 1
        :returns: Whether the joystick button was released since the last check
        """
        ...
    
    def getStickAxis(self, stick: int, axis: int) -> float:
        """Get the value of the axis on a joystick.

        This depends on the mapping of the joystick connected to the specified
        port.

        :param stick: The joystick port number
        :param axis: The analog axis value to read from the joystick.

        :returns: The value of the axis on the joystick.
        """
        ...
    
    def getStickPOV(self, stick: int, pov: int) -> int:
        """Get the state of a POV on the joystick.

        :param stick: The joystick port number
        :param pov: which POV

        :returns: The angle of the POV in degrees, or -1 if the POV is not
                  pressed.
        """
        ...
    
    def getStickButtons(self, stick: int) -> int:
        """The state of all the buttons on the joystick.

        :param stick: The joystick port number

        :returns: The state of all buttons, as a bit array.
        """
        ...
    
    def getStickAxisCount(self, stick: int) -> int:
        """Returns the number of axes on a given joystick port.

        :param stick: The joystick port number

        :returns: The number of axes on the indicated joystick
        """
        ...
    
    def getStickPOVCount(self, stick: int) -> int:
        """Returns the number of POVs on a given joystick port.

        :param stick: The joystick port number

        :returns: The number of POVs on the indicated joystick
        """
        ...
    
    def getStickButtonCount(self, stick: int) -> int:
        """Gets the number of buttons on a joystick.

        :param stick: The joystick port number

        :returns: The number of buttons on the indicated joystick.
        """
        ...
    
    def getJoystickIsXbox(self, stick: int) -> bool:
        """Gets the value of isXbox on a joystick.

        :param stick: The joystick port number

        :returns: A boolean that returns the value of isXbox
        """
        ...
    
    def getJoystickType(self, stick: int) -> int:
        """
        Gets the value of type on a joystick

        :param stick: The joystick port number

        :returns: An integer that returns the value of type.
        """
        ...
    
    def getJoystickName(self, stick: int) -> str:
        """
        Gets the name of a joystick

        :param stick: The joystick port number

        :returns: The joystick name.
        """
        ...
    
    def getJoystickAxisType(self, stick: int, axis: int) -> int:
        """Returns the types of Axes on a given joystick port.

        :param stick: The joystick port number
        :param axis: The target axis

        :returns: An integer that reports type of axis the axis is reporting to be
        """
        ...
    
    def getControlState(self) -> Tuple[bool, bool, bool]:
        """More efficient way to determine what state the robot is in.

        :returns: booleans representing enabled, isautonomous, istest

        .. versionadded:: 2019.2.1

        .. note:: This function only exists in RobotPy
        """
        ...
    
    def isEnabled(self) -> bool:
        """Gets a value indicating whether the Driver Station requires the
        robot to be enabled.

        :returns: True if the robot is enabled, False otherwise.
        """
        ...
    
    def isDisabled(self) -> bool:
        """Gets a value indicating whether the Driver Station requires the
        robot to be disabled.

        :returns: True if the robot should be disabled, False otherwise.
        """
        ...
    
    def isAutonomous(self) -> bool:
        """Gets a value indicating whether the Driver Station requires the
        robot to be running in autonomous mode.

        :returns: True if autonomous mode should be enabled, False otherwise.
        """
        ...
    
    def isAutonomousEnabled(self) -> bool:
        """Equivalent to calling ``isAutonomous() and isEnabled()`` but
        more efficient.

        :returns: True if the robot is in autonomous mode and is enabled,
            False otherwise.

        .. versionadded:: 2019.2.1

        .. note:: This function only exists in RobotPy
        """
        ...
    
    def isOperatorControl(self) -> bool:
        """Gets a value indicating whether the Driver Station requires the
        robot to be running in operator-controlled mode.

        :returns: True if operator-controlled mode should be enabled,
            False otherwise.
        """
        ...
    
    def isOperatorControlEnabled(self) -> bool:
        """Equivalent to calling ``isOperatorControl() and isEnabled()`` but
        more efficient.

        :returns: True if the robot is in operator-controlled mode and is enabled,
            False otherwise.

        .. versionadded:: 2019.2.1

        .. note:: This function only exists in RobotPy
        """
        ...
    
    def isTest(self) -> bool:
        """Gets a value indicating whether the Driver Station requires the
        robot to be running in test mode.

        :returns: True if test mode should be enabled, False otherwise.
        """
        ...
    
    def isDSAttached(self) -> bool:
        """Is the driver station attached to the robot?

        :returns: True if the robot is being controlled by a driver station.
        """
        ...
    
    def isNewControlData(self) -> bool:
        """Gets if a new control packet from the driver station arrived since
        the last time this function was called.

        :returns: True if the control data has been updated since the last
            call.
        """
        ...
    
    def isFMSAttached(self) -> bool:
        """Gets if the driver station attached to a Field Management System.

        :returns: True if the robot is competing on a field being controlled
            by a Field Management System
        """
        ...
    
    def isSysActive(self) -> bool:
        """
        Gets a value indicating whether the FPGA outputs are enabled. The
        outputs may be disabled if the robot is disabled or e-stopped, the
        watchdog has expired, or if the roboRIO browns out.

        .. deprecated:: 2018.0.0
            Use :meth:`.RobotController.isSysActive`

        :returns: True if the FPGA outputs are enabled.
        """
        ...
    
    def isBrownedOut(self) -> bool:
        """
        Check if the system is browned out.

        .. deprecated:: 2018.0.0
            Use :meth:`.RobotController.isBrownedOut`

        :returns: True if the system is browned out.
        """
        ...
    
    def getGameSpecificMessage(self) -> str:
        """Get the game specific message.

        :returns: The game specific message
        """
        ...
    
    def getEventName(self) -> str:
        """Get the event name.

        :returns: The event name
        """
        ...
    
    def getMatchType(self) -> MatchType:
        """Get the match type.

        :returns: The match type
        """
        ...
    
    def getMatchNumber(self) -> int:
        """Get the match number.

        :returns: The match number
        """
        ...
    
    def getReplayNumber(self) -> int:
        """Get the replay number.

        :returns: The replay number
        """
        ...
    
    def getAlliance(self) -> Alliance:
        """Get the current alliance from the FMS.

        :returns: The current alliance
        """
        ...
    
    def getLocation(self) -> int:
        """Gets the location of the team's driver station controls.

        :returns: The location of the team's driver station controls:
            1, 2, or 3
        """
        ...
    
    def waitForData(self, timeout: Optional[float] = ...) -> bool:
        """Wait for new data or for timeout, which ever comes first.

        If timeout is None, wait for new data only.

        :param timeout: The maximum time in seconds to wait.

        :returns: True if there is new data, otherwise False
        """
        ...
    
    def getMatchTime(self) -> int:
        """Return the approximate match time.

        The FMS does not currently send the official match time to the robots, but
        does send an approximate match time. The value will count down the time
        remaining in the current period (auto or teleop).

        .. warning::

            This is not an official time (so it cannot be used to argue with
            referees or guarantee that a function will trigger before a match ends).

        The Practice Match function of the DS approximates the behaviour seen on the field.

        :returns: Time remaining in current match period (auto or teleop) in seconds
        """
        ...
    
    def getBatteryVoltage(self) -> float:
        """Read the battery voltage.

        .. deprecated:: 2018.0.0
            Use :meth:`.RobotController.getBatteryVoltage`

        :returns: The battery voltage in Volts.
        """
        ...
    
    def InDisabled(self, entering: bool) -> None:
        """Only to be used to tell the Driver Station what code you claim to
        be executing for diagnostic purposes only.

        :param entering: If True, starting disabled code; if False, leaving
            disabled code
        """
        self.userInDisabled = ...
    
    def InAutonomous(self, entering: bool) -> None:
        """Only to be used to tell the Driver Station what code you claim to
        be executing for diagnostic purposes only.

        :param entering: If True, starting autonomous code; if False, leaving
            autonomous code
        """
        self.userInAutonomous = ...
    
    def InOperatorControl(self, entering: bool) -> None:
        """Only to be used to tell the Driver Station what code you claim to
        be executing for diagnostic purposes only.

        :param entering: If True, starting teleop code; if False, leaving
            teleop code
        """
        self.userInTeleop = ...
    
    def InTest(self, entering: bool) -> None:
        """Only to be used to tell the Driver Station what code you claim to
        be executing for diagnostic purposes only.

        :param entering: If True, starting test code; if False, leaving test
            code
        """
        self.userInTest = ...
    
    _red_alliance_ids = ...
    def _sendMatchData(self) -> None:
        ...
    
    def _getData(self) -> None:
        """Copy data from the DS task for the user.
        If no new data exists, it will just be returned, otherwise
        the data will be copied from the DS polling loop.
        """
        ...
    
    def _reportJoystickUnpluggedError(self, message: str) -> None:
        """
        Reports errors related to unplugged joysticks and throttles them so that they don't overwhelm the DS.
        """
        ...
    
    def _reportJoystickUnpluggedWarning(self, message: str) -> None:
        """
        Reports errors related to unplugged joysticks and throttles them so that they don't overwhelm the DS.
        """
        ...
    
    def _run(self) -> None:
        """Provides the service routine for the DS polling thread."""
        ...
    
    def _updateControlWord(self, force: bool) -> None:
        """Updates the data in the control word cache.

        Updates if the force parameter is set, or if 50ms have passed since the last update.

        :param force: True to force an update to the cache, otherwise update if 50ms have passed.
        """
        ...
    


