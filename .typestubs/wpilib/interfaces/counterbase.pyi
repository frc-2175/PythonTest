"""
This type stub file was generated by pyright.
"""

import enum

"""
This type stub file was generated by pyright.
"""
__all__ = ["CounterBase"]
class CounterBase:
    """Interface for counting the number of ticks on a digital input channel.
    Encoders, Gear tooth sensors, and counters should all subclass this so it
    can be used to build more advanced classes for control and driving.

    All counters will immediately start counting - :meth:`reset` them if you
    need them to be zeroed before use.
    """
    class EncodingType(enum.IntEnum):
        """The number of edges for the counterbase to increment or decrement on"""
        k1X = ...
        k2X = ...
        k4X = ...
    
    
    def get(self) -> int:
        """Get the count
        
        :returns: the count
        """
        ...
    
    def reset(self) -> None:
        """Reset the count to zero"""
        ...
    
    def getPeriod(self) -> float:
        """Get the time between the last two edges counted
        
        :returns: the time between the last two ticks in seconds
        """
        ...
    
    def setMaxPeriod(self, maxPeriod: float) -> None:
        """Set the maximum time between edges to be considered stalled
        
        :param maxPeriod: the maximum period in seconds
        """
        ...
    
    def getStopped(self) -> bool:
        """Determine if the counter is not moving
        
        :returns: True if the counter has not changed for the max period
        """
        ...
    
    def getDirection(self) -> bool:
        """Determine which direction the counter is going
        
        :returns: True for one direction, False for the other
        """
        ...
    


