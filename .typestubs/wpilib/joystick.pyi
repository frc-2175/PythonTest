"""
This type stub file was generated by pyright.
"""

import enum
from .interfaces.generichid import GenericHID
from typing import Any, Optional

"""
This type stub file was generated by pyright.
"""
__all__ = ["Joystick"]
class Joystick(GenericHID):
    """Handle input from standard Joysticks connected to the Driver Station.
    
    This class handles standard input that comes from the Driver Station. Each
    time a value is requested the most recent value is returned. There is a
    single class instance for each joystick and the mapping of ports to
    hardware buttons depends on the code in the Driver Station.
    """
    kDefaultXChannel = ...
    kDefaultYChannel = ...
    kDefaultZChannel = ...
    kDefaultTwistChannel = ...
    kDefaultThrottleChannel = ...
    kDefaultXAxis = ...
    kDefaultYAxis = ...
    kDefaultZAxis = ...
    kDefaultTwistAxis = ...
    kDefaultThrottleAxis = ...
    kDefaultTriggerButton = ...
    kDefaultTopButton = ...
    class AxisType(enum.IntEnum):
        """Represents an analog axis on a joystick."""
        kX = ...
        kY = ...
        kZ = ...
        kTwist = ...
        kThrottle = ...
    
    
    class Axis(enum.IntEnum):
        """Represents an analog axis on a joystick"""
        kX = ...
        kY = ...
        kZ = ...
        kTwist = ...
        kThrottle = ...
        kNumAxes = ...
    
    
    class ButtonType(enum.IntEnum):
        """Represents a digital button on the Joystick"""
        kTrigger = ...
        kTop = ...
    
    
    Button = ...
    def __init__(self, port: int) -> None:
        """Construct an instance of a joystick.

        The joystick index is the USB port on the Driver Station.

        This constructor is intended for use by subclasses to configure the
        number of constants for axes and buttons.

        :param port: The port on the Driver Station that the joystick is
            plugged into.
        """
        self.axes = ...
    
    def setXChannel(self, channel: int) -> None:
        """Set the channel associated with the X axis.

        :param channel: The channel to set the axis to.
        """
        ...
    
    def setYChannel(self, channel: int) -> None:
        """Set the channel associated with the Y axis.

        :param channel: The channel to set the axis to.
        """
        ...
    
    def setZChannel(self, channel: int) -> None:
        """Set the channel associated with the Z axis.

        :param channel: The channel to set the axis to.
        """
        ...
    
    def setThrottleChannel(self, channel: int) -> None:
        """Set the channel associated with the Throttle axis.

        :param channel: The channel to set the axis to.
        """
        ...
    
    def setTwistChannel(self, channel: int) -> None:
        """Set the channel associated with the Twist axis.

        :param channel: The channel to set the axis to.
        """
        ...
    
    def setAxisChannel(self, axis, channel) -> None:
        """Set the channel associated with a specified axis.

        :param axis: The axis to set the channel for.
        :param channel: The channel to set the axis to.

        .. deprecated:: 2018.0.0
            Use the more specific axis channel setter functions
        """
        ...
    
    def getXChannel(self) -> int:
        """Get the channel currently associated with the X axis

        :returns: The channel for the axis
        """
        ...
    
    def getYChannel(self) -> int:
        """Get the channel currently associated with the Y axis

        :returns: The channel for the axis
        """
        ...
    
    def getZChannel(self) -> int:
        """Get the channel currently associated with the Z axis

        :returns: The channel for the axis
        """
        ...
    
    def getThrottleChannel(self) -> int:
        """Get the channel currently associated with the Throttle axis

        :returns: The channel for the axis
        """
        ...
    
    def getTwistChannel(self) -> int:
        """Get the channel currently associated with the Twist axis

        :returns: The channel for the axis
        """
        ...
    
    def getAxisChannel(self, axis: int) -> int:
        """Get the channel currently associated with the specified axis.

        :param axis: The axis to look up the channel for.
        :returns: The channel for the axis.
        
        ..deprecated:: 2018.0.0
            Use the more specific axis channel getter functions
        """
        ...
    
    def getX(self, hand: Optional[Any] = ...) -> float:
        """Get the X value of the joystick.

        This depends on the mapping of the joystick connected to the current
        port.

        :param hand: Unused
        :returns: The X value of the joystick.
        """
        ...
    
    def getY(self, hand: Optional[Any] = ...) -> float:
        """Get the Y value of the joystick.

        This depends on the mapping of the joystick connected to the current
        port.

        :param hand: Unused
        :returns: The Y value of the joystick.
        """
        ...
    
    def getZ(self, hand: Optional[Any] = ...) -> float:
        """Get the Z position of the HID

        :param hand: Unused
        :returns: the Z position
        """
        ...
    
    def getTwist(self) -> float:
        """Get the twist value of the current joystick.

        This depends on the mapping of the joystick connected to the current
        port.

        :returns: The Twist value of the joystick.
        """
        ...
    
    def getThrottle(self) -> float:
        """Get the throttle value of the current joystick.

        This depends on the mapping of the joystick connected to the current
        port.

        :returns: The Throttle value of the joystick.
        """
        ...
    
    def getAxis(self, axis) -> float:
        """For the current joystick, return the axis determined by the
        argument.

        This is for cases where the joystick axis is returned programmatically,
        otherwise one of the previous functions would be preferable (for
        example :func:`getX`).

        :param axis: The axis to read.
        :returns: The value of the axis.

        ..deprecated: 2018.0.0
            Use the more specific axis getter functions.
        """
        ...
    
    def getTrigger(self) -> bool:
        """Read the state of the trigger on the joystick.

        Look up which button has been assigned to the trigger and read its
        state.

        :returns: The state of the trigger.
        """
        ...
    
    def getTriggerPressed(self) -> bool:
        """Whether the trigger was pressed since the last check

        :returns: Whether the button was pressed since the last check
        """
        ...
    
    def getTriggerReleased(self) -> bool:
        """Whether the trigger was released since the last check.

        :returns: Whether the button was released since the last check.
        """
        ...
    
    def getTop(self) -> bool:
        """Read the state of the top button on the joystick.

        Look up which button has been assigned to the top and read its state.

        :returns: The state of the top button.
        """
        ...
    
    def getTopPressed(self) -> bool:
        """Whether the trigger was pressed since the last check

        :returns: Whether the button was pressed since the last check
        """
        ...
    
    def getTopReleased(self) -> bool:
        """Whether the trigger was released since the last check.

        :returns: Whether the button was released since the last check.
        """
        ...
    
    def getButton(self, button: ButtonType) -> bool:
        """Get buttons based on an enumerated type.

        The button type will be looked up in the list of buttons and then read.

        :param button: The type of button to read.
        :returns: The state of the button.

        ..deprecated: 2018.0.0
            Use Button enum values instead of ButtonType
        """
        ...
    
    def getMagnitude(self) -> float:
        """Get the magnitude of the direction vector formed by the joystick's
        current position relative to its origin.

        :returns: The magnitude of the direction vector
        """
        ...
    
    def getDirectionRadians(self) -> float:
        """Get the direction of the vector formed by the joystick and its
        origin in radians.

        :returns: The direction of the vector in radians
        """
        ...
    
    def getDirectionDegrees(self) -> float:
        """Get the direction of the vector formed by the joystick and its
        origin in degrees.

        :returns: The direction of the vector in degrees
        """
        ...
    


