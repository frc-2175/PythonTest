"""
This type stub file was generated by pyright.
"""

from .interfaces.speedcontroller import SpeedController
from .motorsafety import MotorSafety
from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["NidecBrushless"]
class NidecBrushless(SendableBase, MotorSafety, SpeedController):
    """Nidec Brushless Motor"""
    def __init__(self, pwmChannel: int, dioChannel: int) -> None:
        """
        :param pwmChannel: The PWM channel that the Nidec Brushless controller is attached to.
                0-9 are on-board, 10-19 are on the MXP port
        :param dioChannel: The DIO channel that the Nidec Brushless controller is attached to.
                0-9 are on-board, 10-25 are on the MXP port
        """
        self.dio = ...
        self.pwm = ...
        self.speed = ...
        self.isInverted = ...
        self.disabled = ...
    
    def close(self) -> None:
        """Free the resources used by this object."""
        ...
    
    def set(self, speed: float) -> None:
        """ 
        Set the PWM value.
    
        The PWM value is set using a range of -1.0 to 1.0, appropriately scaling the value for the FPGA.

        :param speed: The speed value between -1.0 and 1.0 to set.
        """
        ...
    
    def get(self) -> float:
        """
        Get the recently set value of the PWM.  

        :returns: The most recently set value for the PWM between -1.0 and 1.0.
        """
        ...
    
    def setInverted(self, isInverted: bool) -> None:
        """
        """
        self.isInverted = ...
    
    def getInverted(self) -> bool:
        ...
    
    def pidWrite(self, output: float) -> None:
        """ 
        Write out the PID value as seen in the PIDOutput base object. 

        :param output: Write out the PWM value as was found in the PIDController
        """
        ...
    
    def stopMotor(self) -> None:
        """
        Stop the motor. This is called by the MotorSafetyHelper object
        when it has a timeout for this PWM and needs to stop it from running.
        Calling :meth:`set` will re-enable the motor.
        """
        ...
    
    def getDescription(self) -> str:
        ...
    
    def disable(self) -> None:
        """
        Disable the motor.  The :meth:`enable` function must be called to re-enable
        the motor.
        """
        self.disabled = ...
    
    def enable(self) -> None:
        """
        Re-enable the motor after :meth:`disable` has been called.  
        The :meth:`set` function must be called to set a new motor speed.
        """
        self.disabled = ...
    
    def getChannel(self) -> int:
        """
        Gets the channel number associated with the object.

        :returns: The channel number.
        """
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


