"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
This type stub file was generated by pyright.
"""
class Notifier:
    def __init__(self, run: callable) -> None:
        """
        Create a Notifier for timer event notification.

        :param run: The handler that is called at the notification time which is
                    set using :meth:`.startSingle` or :meth:`.startPeriodic`.
        """
        ...
    
    def close(self) -> None:
        ...
    
    def _updateAlarm(self, triggerTime: Optional[Any] = ...) -> None:
        """
        Update the alarm hardware to reflect the next alarm.

        :param triggerTime: the time at which the next alarm will be triggered
        """
        ...
    
    def _run(self) -> None:
        ...
    
    def setHandler(self, handler: callable) -> None:
        """Change the handler function.
        
        :param handler: Handler
        """
        ...
    
    def startSingle(self, delay: float) -> None:
        """Register for single event notification.

        A timer event is queued for a single event after the specified delay.

        :param delay: Seconds to wait before the handler is called.
        """
        ...
    
    def startPeriodic(self, period: float) -> None:
        """Register for periodic event notification.

        A timer event is queued for periodic event notification.
        Each time the interrupt occurs, the event will be immediately
        requeued for the same time interval.

        :param period: Period in seconds to call the handler starting
                       one period after the call to this method.
        """
        ...
    
    def stop(self) -> None:
        """Stop timer events from occurring.

        Stop any repeating timer events from occurring. This will also
        remove any single notification events from the queue.
        If a timer-based call to the registered handler is in progress,
        this function will block until the handler call is complete.
        """
        ...
    


