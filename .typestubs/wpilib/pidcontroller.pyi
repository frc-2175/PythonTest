"""
This type stub file was generated by pyright.
"""

from .sendablebuilder import SendableBuilder
from .pidbase import PIDBase

"""
This type stub file was generated by pyright.
"""
__all__ = ["PIDController"]
class PIDController(PIDBase):
    """Can be used to control devices via a PID Control Loop.

    Creates a separate thread which reads the given :class:`.PIDSource` and takes
    care of the integral calculations, as well as writing the given
    :class:`.PIDOutput`.

    This feedback controller runs in discrete time, so time deltas are not used
    in the integral and derivative calculations. Therefore, the sample rate affects
    the controller's behavior for a given set of PID constants.
    """
    def __init__(self, Kp, Ki, Kd, *args, **kwargs):
        """Allocate a PID object with the given constants for P, I, D, and F

        Arguments can be structured as follows:

        - Kp, Ki, Kd, Kf, source, output, period
        - Kp, Ki, Kd, source, output, period
        - Kp, Ki, Kd, source, output
        - Kp, Ki, Kd, Kf, source, output

        :param Kp: the proportional coefficient
        :param Ki: the integral coefficient
        :param Kd: the derivative coefficient
        :param Kf: the feed forward term
        :param source: Called to get values
        :param output: Receives the output percentage
        :param period: the loop time for doing calculations. This particularly
            effects calculations of the integral and differential terms.
            The default is 0.05 (50ms).
        """
        self.period = ...
        self.controlLoop = ...
    
    def close(self) -> None:
        """Free the PID object"""
        ...
    
    def enable(self) -> None:
        """Begin running the PIDController."""
        ...
    
    def disable(self) -> None:
        """Stop running the PIDController, this sets the output to zero before
        stopping."""
        ...
    
    def setEnabled(self, enable: bool) -> None:
        """Set the enabled state of the PIDController."""
        ...
    
    def isEnabled(self) -> bool:
        """Return True if PIDController is enabled."""
        ...
    
    def reset(self) -> None:
        """Reset the previous error, the integral term, and disable the
        controller."""
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


