"""
This type stub file was generated by pyright.
"""

import hal
import enum
from typing import List, Optional
from .motorsafety import MotorSafety
from .sendablebuilder import SendableBuilder
from .sendablebase import SendableBase

"""
This type stub file was generated by pyright.
"""
__all__ = ["Relay"]
def _freeRelay(*handles: List[hal.RelayHandle]) -> None:
    ...

class Relay(SendableBase, MotorSafety):
    """Controls VEX Robotics Spike style relay outputs.

    Relays are intended to be connected to Spikes or similar relays. The relay
    channels controls a pair of channels that are either both off, one on, the
    other on, or both on. This translates into two Spike outputs at 0v, one at
    12v and one at 0v, one at 0v and the other at 12v, or two Spike outputs at
    12V. This allows off, full forward, or full reverse control of motors without
    variable speed. It also allows the two channels (forward and reverse) to
    be used independently for something that does not care about voltage
    polarity (like a solenoid).

    .. not_implemented: initRelay
    """
    relayChannels = ...
    class Value(enum.IntEnum):
        """The state to drive a Relay to."""
        kOff = ...
        kOn = ...
        kForward = ...
        kReverse = ...
        def getPrettyValue(self) -> str:
            ...
        
        @classmethod
        def getValueOf(cls, name: str) -> Relay.Value:
            ...
        
    
    
    class Direction(enum.IntEnum):
        """The Direction(s) that a relay is configured to operate in."""
        kBoth = ...
        kForward = ...
        kReverse = ...
    
    
    def __init__(self, channel: int, direction: Optional[Direction] = ...) -> None:
        """Relay constructor given a channel.

        Initially the relay is set to both lines at 0v.

        :param channel: The channel number for this relay (0-3)
        :param direction: The direction that the Relay object will control.
            If not specified, defaults to allowing both directions.
        """
        self.channel = ...
        self.direction = ...
        self.forwardHandle = ...
        self.reverseHandle = ...
    
    def _initRelay(self) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def freeRelay(self) -> None:
        self.forwardHandle = ...
        self.reverseHandle = ...
    
    def set(self, value: Value) -> None:
        """Set the relay state.

        Valid values depend on which directions of the relay are controlled by
        the object.

        When set to kBothDirections, the relay can be set to any of the four
        states: 0v-0v, 12v-0v, 0v-12v, 12v-12v

        When set to kForwardOnly or kReverseOnly, you can specify the constant
        for the direction or you can simply specify kOff and kOn. Using only
        kOff and kOn is recommended.

        :param value: The state to set the relay.
        """
        ...
    
    def get(self) -> Value:
        """Get the Relay State

        Gets the current state of the relay.

        When set to kForwardOnly or kReverseOnly, value is returned as kOn/kOff
        not kForward/kReverse (per the recommendation in Set)

        :returns: The current state of the relay
        """
        ...
    
    def getChannel(self) -> int:
        """
        Get the channel number.

        :returns: The channel number.
        """
        ...
    
    def stopMotor(self) -> None:
        ...
    
    def getDescription(self) -> str:
        ...
    
    def setDirection(self, direction: Direction) -> None:
        """Set the Relay Direction.

        Changes which values the relay can be set to depending on which
        direction is used.

        Valid inputs are kBothDirections, kForwardOnly, and kReverseOnly.

        :param direction: The direction for the relay to operate in
        """
        self.direction = ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


