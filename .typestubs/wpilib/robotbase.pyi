"""
This type stub file was generated by pyright.
"""

import logging
from typing import Tuple, Type

"""
This type stub file was generated by pyright.
"""
logger = logging.getLogger("robotpy")
__all__ = ["RobotBase"]
class RobotBase:
    """Implement a Robot Program framework.

    The RobotBase class is intended to be subclassed by a user creating a
    robot program.  Overridden ``autonomous()`` and ``operatorControl()`` methods
    are called at the appropriate time as the match proceeds. In the current
    implementation, the Autonomous code will run to completion before the
    OperatorControl code could start. In the future the Autonomous code might
    be spawned as a task, then killed at the end of the Autonomous period.

    User code should be placed in the constructor that runs before the
    Autonomous or Operator Control period starts. The constructor will
    run to completion before Autonomous is entered.

    .. warning:: If you override ``__init__`` in your robot class, you must call
                 the base class constructor. This must be used to ensure that
                 the communications code starts.

    .. not_implemented: getBooleanProperty
    """
    def __init__(self) -> None:
        self.ds = ...
        self.getControlState = ...
        self.isDisabled = ...
        self.isEnabled = ...
        self.isAutonomous = ...
        self.isAutonomousEnabled = ...
        self.isTest = ...
        self.isOperatorControl = ...
        self.isOperatorControlEnabled = ...
        self.isNewDataAvailable = ...
    
    def free(self) -> None:
        """Free the resources for a RobotBase class.

        .. deprecated:: 2019.0.0
            Use :meth:`close` instead"""
        ...
    
    def close(self) -> None:
        ...
    
    @staticmethod
    def isSimulation() -> bool:
        """Get if the robot is a simulation.

        :returns: If the robot is running in simulation.
        """
        ...
    
    @staticmethod
    def isReal() -> bool:
        """Get if the robot is real.

        :returns: If the robot is running in the real world.
        """
        ...
    
    def getControlState(self) -> Tuple[bool, bool, bool]:
        """More efficient way to determine what state the robot is in.

        :returns: booleans representing enabled, isautonomous, istest

        .. versionadded:: 2019.2.1

        .. note:: This function only exists in RobotPy
        """
        ...
    
    def isDisabled(self) -> bool:
        """Determine if the Robot is currently disabled.

        :returns: True if the Robot is currently disabled by the field controls.
        """
        ...
    
    def isEnabled(self) -> bool:
        """Determine if the Robot is currently enabled.

        :returns: True if the Robot is currently enabled by the field controls.
        """
        ...
    
    def isAutonomous(self) -> bool:
        """Determine if the robot is currently in Autonomous mode as
        determined by the field controls.

        :returns: True if the robot is currently operating Autonomously
        """
        ...
    
    def isAutonomousEnabled(self) -> bool:
        """Equivalent to calling ``isAutonomous() and isEnabled()`` but
        more efficient.

        :returns: True if the robot is in autonomous mode and is enabled,
            False otherwise.
        
        .. versionadded:: 2019.2.1

        .. note:: This function only exists in RobotPy
        """
        ...
    
    def isTest(self) -> bool:
        """Determine if the robot is currently in Test mode as
        determined by the driver station.

        :returns: True if the robot is currently operating in Test mode.
        """
        ...
    
    def isOperatorControl(self) -> bool:
        """Determine if the robot is currently in Operator Control mode as
        determined by the field controls.

        :returns: True if the robot is currently operating in Tele-Op mode
        """
        ...
    
    def isOperatorControlEnabled(self) -> bool:
        """Equivalent to calling ``isOperatorControl() and isEnabled()`` but
        more efficient.

        :returns: True if the robot is in operator-controlled mode and is enabled,
            False otherwise.
        
        .. versionadded:: 2019.2.1

        .. note:: This function only exists in RobotPy
        """
        ...
    
    def isNewDataAvailable(self) -> bool:
        """Indicates if new data is available from the driver station.

        :returns: Has new data arrived over the network since the last time
                  this function was called?
        """
        ...
    
    def startCompetition(self) -> None:
        """Provide an alternate "main loop" via startCompetition()."""
        ...
    
    @staticmethod
    def main(robot_cls: Type[RobotBase]) -> bool:
        """Starting point for the applications."""
        ...
    


