"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, List, Optional
from networktables.entry import NetworkTableEntry
from networktables.networktable import NetworkTable

"""
This type stub file was generated by pyright.
"""
__all__ = ["SendableBuilder"]
class Property:
    def __init__(self, table: NetworkTable, key: str, update: Callable, setter: Callable, listen_local: bool) -> None:
        self.entry = ...
        self.key = ...
        self.update = ...
        self.setter = ...
        self.listener = ...
        self.listen_local = ...
    
    def createListener(self, entry: NetworkTableEntry) -> None:
        self.listener = ...
    
    def startListener(self) -> None:
        ...
    
    def stopListener(self) -> None:
        ...
    


class SendableBuilder:
    def __init__(self) -> None:
        self.table = ...
        self.safeState = ...
        self.properties = ...
        self.controllableEntry = ...
        self.actuator = ...
    
    def setTable(self, table: NetworkTable) -> None:
        """
        Set the network table.  Must be called prior to any Add* functions being called.

        :param table: Network table
        """
        self.table = ...
        self.controllableEntry = ...
    
    def getTable(self) -> NetworkTable:
        """
        Get the network table.

        :returns: The network table
        """
        ...
    
    def isActuator(self) -> bool:
        """
        Return whether this sendable should be treated as an actuator.
        """
        ...
    
    def updateTable(self) -> None:
        """
        Update the network table values by calling the getters for all properties.
        """
        ...
    
    def startListeners(self) -> None:
        """Hook setters for all properties"""
        ...
    
    def stopListeners(self) -> None:
        """Unhook setters for all properties"""
        ...
    
    def startLiveWindowMode(self) -> None:
        """
        Start LiveWindow mode by hooking the setters for all properties. Also calls
        the safeState function if one was provided.
        """
        ...
    
    def stopLiveWindowMode(self) -> None:
        """
        Stop LiveWindow mode by unhooking the setters for all properties. Also calls
        the safeState function if one was provided.
        """
        ...
    
    def setSmartDashboardType(self, type: str) -> None:
        """
        Set the string representation of the named data type that will be used
        by the smart dashboard for this sendable.
   
        :param type: data type
        """
        ...
    
    def setActuator(self, value) -> None:
        """
        Set a flag indicating if this sendable should be treated as an actuator.
        By default this flag is false.

        :param value: true if actuator, false if not
        """
        self.actuator = ...
    
    def setSafeState(self, func: Callable) -> None:
        """
        Set the function that should be called to set the Sendable into a safe
        state.  This is called when entering and exiting Live Window mode.

        :param func:    function
        """
        self.safeState = ...
    
    def setUpdateTable(self, func: Callable) -> None:
        """
        Set the function that should be called to update the network table
        for things other than properties.  Note this function is not passed
        the network table object; instead it should use the entry handles
        returned by getEntry().

        :param func:    function
        """
        ...
    
    def getEntry(self, key: str) -> NetworkTableEntry:
        """
        Add a property without getters or setters.  This can be used to get
        entry handles for the function called by setUpdateTable().

        :param key:   property name
        :returns: Network table entry
        """
        ...
    
    def _addProperty(self, key: str, updater: Callable, setter: Callable, listen_local: bool) -> None:
        ...
    
    def addBooleanProperty(self, key: str, getter: Optional[Callable[[], bool]], setter: Optional[Callable[[bool], Any]], local: bool = ...) -> None:
        """
        Add a boolean property.
   
        :param key:     property name
        :param getter:  getter function (returns current value)
        :param setter:  setter function (sets new value)
        :param local:   (python-specific) if True, setter will be called on local updates
        """
        ...
    
    def addDoubleProperty(self, key: str, getter: Optional[Callable[[], float]], setter: Optional[Callable[[float], Any]], local: bool = ...) -> None:
        """
        Add a double property.
   
        :param key:     property name
        :param getter:  getter function (returns current value)
        :param setter:  setter function (sets new value)
        :param local:   (python-specific) if True, setter will be called on local updates
        """
        ...
    
    def addStringProperty(self, key: str, getter: Optional[Callable[[], str]], setter: Optional[Callable[[str], Any]], local: bool = ...) -> None:
        """
        Add a string property.
   
        :param key:     property name
        :param getter:  getter function (returns current value)
        :param setter:  setter function (sets new value)
        :param local:   (python-specific) if True, setter will be called on local updates
        """
        ...
    
    def addBooleanArrayProperty(self, key: str, getter: Optional[Callable[[], List[bool]]], setter: Optional[Callable[[List[bool]], Any]], local: bool = ...) -> None:
        """
        Add a boolean array property.
   
        :param key:     property name
        :param getter:  getter function (returns current value)
        :param setter:  setter function (sets new value)
        :param local:   (python-specific) if True, setter will be called on local updates
        """
        ...
    
    def addDoubleArrayProperty(self, key: str, getter: Optional[Callable[[], List[float]]], setter: Optional[Callable[[List[float]], Any]], local: bool = ...) -> None:
        """
        Add a double array property.
   
        :param key:     property name
        :param getter:  getter function (returns current value)
        :param setter:  setter function (sets new value)
        :param local:   (python-specific) if True, setter will be called on local updates
        """
        ...
    
    def addStringArrayProperty(self, key: str, getter: Optional[Callable[[], List[str]]], setter: Optional[Callable[[List[str]], Any]], local: bool = ...) -> None:
        """
        Add a string array property.
   
        :param key:     property name
        :param getter:  getter function (returns current value)
        :param setter:  setter function (sets new value)
        :param local:   (python-specific) if True, setter will be called on local updates
        """
        ...
    
    def addRawProperty(self, key: str, getter: Optional[Callable[[], bytes]], setter: Optional[Callable[[bytes], Any]], local: bool = ...) -> None:
        """
        Add a raw property.
   
        :param key:     property name
        :param getter:  getter function (returns current value)
        :param setter:  setter function (sets new value)
        :param local:   (python-specific) if True, setter will be called on local updates
        """
        ...
    


