"""
This type stub file was generated by pyright.
"""

from typing import Any
from .sendablebase import SendableBase
from .sendablebuilder import SendableBuilder

"""
This type stub file was generated by pyright.
"""
__all__ = ["SendableChooser"]
class SendableChooser(SendableBase):
    """A useful tool for presenting a selection of options to be displayed on
    the :class:`.SmartDashboard`

    For instance, you may wish to be able to select between multiple
    autonomous modes. You can do this by putting every possible :class:`.Command`
    you want to run as an autonomous into a SendableChooser and then put
    it into the :class:`.SmartDashboard` to have a list of options appear on the
    laptop. Once autonomous starts, simply ask the SendableChooser what
    the selected value is.

    Example::

        # This shows the user two options on the SmartDashboard
        chooser = wpilib.SendableChooser()
        chooser.addObject('option1', '1')
        chooser.addObject('option2', '2')

        wpilib.SmartDashboard.putData('Choice', chooser)

        # .. later, ask to see what the user selected?
        value = chooser.getSelected()

    """
    DEFAULT = ...
    SELECTED = ...
    ACTIVE = ...
    OPTIONS = ...
    INSTANCE = ...
    _increment_lock = ...
    _instances = ...
    def __init__(self) -> None:
        """Instantiates a SendableChooser.
        """
        self.map = ...
        self.selected = ...
        self.defaultChoice = ...
        self.activeEntries = ...
        self.mutex = ...
    
    def addOption(self, name: str, object: Any) -> None:
        """Adds the given object to the list of options. On the
        :class:`.SmartDashboard` on the desktop, the object will appear as the
        given name.

        :param name: the name of the option
        :param object: the option
        """
        ...
    
    def addObject(self, name: str, object: Any) -> None:
        """Adds the given object to the list of options. On the
        :class:`.SmartDashboard` on the desktop, the object will appear as the
        given name.

        :param name: the name of the option
        :param object: the option

        .. deprecated:: 2019.0.0
            Use :meth:`addOption` instead
        """
        ...
    
    def setDefaultOption(self, name: str, object: Any) -> None:
        """Add the given object to the list of options and marks it as the
        default.  Functionally, this is very close to :meth:`.addObject` except
        that it will use this as the default option if none other is
        explicitly selected.

        :param name: the name of the option
        :param object: the option
        """
        self.defaultChoice = ...
    
    def addDefault(self, name: str, object: Any) -> None:
        """Add the given object to the list of options and marks it as the
        default.  Functionally, this is very close to :meth:`.addObject` except
        that it will use this as the default option if none other is
        explicitly selected.

        :param name: the name of the option
        :param object: the option

        .. deprecated:: 2019.0.0
            Use :meth:`setDefaultOption` instead
        """
        ...
    
    def getSelected(self) -> Any:
        """Returns the object associated with the selected option. If there
        is none selected, it will return the default. If there is none
        selected and no default, then it will return None.

        :returns: the object associated with the selected option
        """
        ...
    
    def initSendable(self, builder: SendableBuilder) -> None:
        ...
    


