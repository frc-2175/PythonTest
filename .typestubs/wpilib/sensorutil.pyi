"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
__all__ = ["SensorUtil"]
class SensorUtil:
    """
    Stores most recent status information as well as containing utility
    functions for checking channels and error processing.
    """
    kSystemClockTicksPerMicrosecond = ...
    kDigitalChannels = ...
    kAnalogInputChannels = ...
    kAnalogOutputChannels = ...
    kSolenoidChannels = ...
    kPwmChannels = ...
    kRelayChannels = ...
    kPDPChannels = ...
    kPDPModules = ...
    kPCMModules = ...
    @staticmethod
    def checkSolenoidModule(moduleNumber: int) -> None:
        """Verify that the solenoid module is correct.

        :param moduleNumber: The solenoid module module number to check.
        """
        ...
    
    @staticmethod
    def checkDigitalChannel(channel: int) -> None:
        """Check that the digital channel number is valid.
        Verify that the channel number is one of the legal channel numbers.
        Channel numbers are 0-based.

        :param channel: The channel number to check.
        """
        ...
    
    @staticmethod
    def checkRelayChannel(channel: int) -> None:
        """Check that the digital channel number is valid.
        Verify that the channel number is one of the legal channel numbers.
        Channel numbers are 0-based.

        :param channel: The channel number to check.
        """
        ...
    
    @staticmethod
    def checkPWMChannel(channel: int) -> None:
        """Check that the digital channel number is valid.
        Verify that the channel number is one of the legal channel numbers.
        Channel numbers are 0-based.

        :param channel: The channel number to check.
        """
        ...
    
    @staticmethod
    def checkAnalogInputChannel(channel: int) -> None:
        """Check that the analog input number is value.
        Verify that the analog input number is one of the legal channel
        numbers.  Channel numbers are 0-based.

        :param channel: The channel number to check.
        """
        ...
    
    @staticmethod
    def checkAnalogOutputChannel(channel: int) -> None:
        """Check that the analog input number is value.
        Verify that the analog input number is one of the legal channel
        numbers.  Channel numbers are 0-based.

        :param channel: The channel number to check.
        """
        ...
    
    @staticmethod
    def checkSolenoidChannel(channel: int) -> None:
        """Verify that the solenoid channel number is within limits.  Channel
        numbers are 0-based.

        :param channel: The channel number to check.
        """
        ...
    
    @staticmethod
    def checkPDPChannel(channel: int) -> None:
        """Verify that the power distribution channel number is within limits.
        Channel numbers are 0-based.

        :param channel: The channel number to check.
        """
        ...
    
    @staticmethod
    def checkPDPModule(module: int) -> None:
        """Verify that the power distribution module number is within limits.
        Module numbers are 0-based.

        :param module: The module number to check.
        """
        ...
    
    @staticmethod
    def getDefaultSolenoidModule() -> int:
        """Get the number of the default solenoid module.

        :returns: The number of the default solenoid module.
        """
        ...
    


