"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, TYPE_CHECKING, Union, overload
from .builtinlayouts import BuiltInLayouts
from ..sendable import Sendable
from .complexwidget import ComplexWidget
from .simplewidget import SimpleWidget

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
__all__ = ["ShuffleboardContainer"]
class ShuffleboardContainer:
    """Common interface for objects that can contain shuffleboard components."""
    __slots__ = ...
    def __init__(self) -> None:
        self.usedTitles = ...
        self.components = ...
        self.layouts = ...
    
    def getComponents(self) -> List[ShuffleboardContainer]:
        """Gets the components that are direct children of this container."""
        ...
    
    def getLayout(self, title: str, type: Optional[Union[BuiltInLayouts, str]] = ...):
        """
        Gets the layout with the given type and title, creating it if it does
        not already exist at the time this method is called.

        :param title: the title of the layout
        :param type:  the type of the layout, eg "List Layout" or "Grid Layout"
        :returns: the layout
        """
        ...
    
    @overload
    def add(self, value: Sendable, *, title: Optional[str] = ...) -> ComplexWidget:
        ...
    
    @overload
    def add(self, *, title: str, value) -> SimpleWidget:
        ...
    
    def add(self, value, *, title: Optional[str] = ...):
        """
        Adds a widget to this container to display the given sendable.

        :param value: the Sendable to display, or the default value of the widget
        :param title: the title of the widget (defaults to the
                      Sendable's name if the value is Sendable)
        :returns: a widget to display the sendable data
        :rtype: ComplexWidget or SimpleWidget
        :raises ValueError: if a widget already exists in this container
                            with the given title.
        """
        ...
    
    def _checkNtType(self, data) -> None:
        ...
    
    def _checkTitle(self, title: str) -> None:
        ...
    
    def addPersistent(self, title: str, defaultValue):
        """
        Adds a widget to this container to display a simple piece of data.
        Unlike :meth:`.add`, the value in the widget will be saved on the
        robot and will be used when the robot program next starts rather than
        `defaultValue`.

        :param title:        the title of the widget
        :param defaultValue: the default value of the widget. note empty lists cannot be used here
        :returns: a widget to display the sendable data
        :rtype: SimpleWidget
        :raises ValueError: if a widget already exists in this container
                            with the given title.

        .. seealso:: :meth:`.add`
        """
        ...
    
    def addCamera(self, name: str, title: Optional[str] = ...):
        """
        Adds a CameraServer stream widget by name.

        :param name: the name of the camera stream
        :param title: the title of the widget
        :rtype: ShuffleboardWidget
        """
        ...
    


