"""
This type stub file was generated by pyright.
"""

import logging
from typing import Callable

"""
This type stub file was generated by pyright.
"""
logger = logging.getLogger(__name__)
__all__ = ["Watchdog"]
class Watchdog:
    """A class that's a wrapper around a watchdog timer.

    When the timer expires, a message is printed to the console and an optional user-provided
    callback is invoked.

    The watchdog is initialized disabled, so the user needs to call enable() before use.
    """
    kMinPrintPeriod = ...
    _watchdogs = ...
    _queueMutex = ...
    _schedulerWaiter = ...
    _keepAlive = ...
    _thread = ...
    @classmethod
    def _reset(cls) -> None:
        ...
    
    def __init__(self, timeout: float, callback: Callable[[], None]) -> None:
        """Watchdog constructor.

        :param timeout: The watchdog's timeout in seconds with microsecond resolution.
        :param callback: This function is called when the timeout expires.
        """
        self.suppressTimeoutMessage = ...
    
    def __lt__(self, other: Watchdog) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __gt__(self, other: Watchdog) -> bool:
        ...
    
    def getTime(self) -> float:
        """Returns the time in seconds since the watchdog was last fed."""
        ...
    
    def setTimeout(self, timeout: float) -> None:
        """Sets the watchdog's timeout.

        :param timeout: The watchdog's timeout in seconds with microsecond
                        resolution.
        """
        ...
    
    def getTimeout(self) -> float:
        """Returns the watchdog's timeout in seconds."""
        ...
    
    def isExpired(self) -> bool:
        """Returns true if the watchdog timer has expired."""
        ...
    
    def addEpoch(self, epochName: str) -> None:
        """
        Adds time since last epoch to the list printed by printEpochs().

        Epochs are a way to partition the time elapsed so that when
        overruns occur, one can determine which parts of an operation
        consumed the most time.

        :param epochName: The name to associate with the epoch.
        """
        ...
    
    def printEpochs(self) -> None:
        """Prints list of epochs added so far and their times."""
        ...
    
    def reset(self) -> None:
        """Resets the watchdog timer.

        This also enables the timer if it was previously disabled.
        """
        ...
    
    def enable(self) -> None:
        """Enables the watchdog timer."""
        ...
    
    def disable(self) -> None:
        """Disables the watchdog timer."""
        ...
    
    @classmethod
    def _schedulerFunc(cls) -> None:
        ...
    


